[{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/articles/dandelionR.html","id":"foreword","dir":"Articles","previous_headings":"","what":"Foreword","title":"Single-cell Immune Repertoire Trajectory Analysis with dandelionR","text":"Welcome dandelionR! dandelionR R package performing single-cell immune repertoire trajectory analysis, based original python implementation dandelion. provides necessary tools interface scRepertoire custom implementation absorbing markov chain pseudotime inference, inspired based palantir python package.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/articles/dandelionR.html","id":"installation","dir":"Articles","previous_headings":"Foreword","what":"Installation","title":"Single-cell Immune Repertoire Trajectory Analysis with dandelionR","text":"can install dandelionR GitHub :","code":"if (!requireNamespace(\"devtools\", quietly = TRUE)) {     install.packages(\"devtools\") } if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") } if (!requireNamespace(\"scater\", quietly = TRUE)) { # only for the tutorial     BiocManager::install(\"scater\") } devtools::install_github(\"tuonglab/dandelionR\", dependencies = TRUE)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/articles/dandelionR.html","id":"usage","dir":"Articles","previous_headings":"Foreword","what":"Usage","title":"Single-cell Immune Repertoire Trajectory Analysis with dandelionR","text":"work progress, please feel free open issue encounter problems suggestions improvement.","code":"library(dandelionR) library(scater)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/articles/dandelionR.html","id":"load-data","dir":"Articles","previous_headings":"Foreword","what":"Load data","title":"Single-cell Immune Repertoire Trajectory Analysis with dandelionR","text":"First, load demo data. -sampled dataset Suo et al 2024 Nature Biotechnology paper. contains 32000 cells TCR information dimensionality reduced data (scVI) need tutorial. gene expression matrix required tutorial included demo data. show separate tutorial start data scRepertoire. set seed plots results consistent.","code":"data(sce_vdj) set.seed(100)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/articles/dandelionR.html","id":"filter-the-data","dir":"Articles","previous_headings":"Foreword","what":"Filter the data","title":"Single-cell Immune Repertoire Trajectory Analysis with dandelionR","text":"begin, filter data extract TCR information can construct pseudobulks. can visualise UMAP filtered data.","code":"sce_vdj <- setupVdjPseudobulk(sce_vdj, already.productive = FALSE) plotUMAP(sce_vdj, color_by = \"anno_lvl_2_final_clean\")"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/articles/dandelionR.html","id":"milo-object-and-neighbourhood-graph-construction","dir":"Articles","previous_headings":"Foreword","what":"Milo object and neighbourhood graph construction","title":"Single-cell Immune Repertoire Trajectory Analysis with dandelionR","text":"use miloR create pseudobulks based gene expression data. goal construct neighbourhood graph many neighbors can sample representative neighbours form objects.","code":"library(miloR) traj_milo <- Milo(sce_vdj) milo_object <- buildGraph(traj_milo, k = 50, d = 20, reduced.dim = \"X_scvi\") milo_object <- makeNhoods(milo_object, reduced_dims = \"X_scvi\", d = 20)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/articles/dandelionR.html","id":"construct-umap-on-milo-neighbor-graph","dir":"Articles","previous_headings":"Foreword > Milo object and neighbourhood graph construction","what":"Construct UMAP on milo neighbor graph","title":"Single-cell Immune Repertoire Trajectory Analysis with dandelionR","text":"can visualise milo object using UMAP.","code":"milo_object <- miloUmap(milo_object) plotUMAP(milo_object, color_by = \"anno_lvl_2_final_clean\", dimred = \"UMAP_knngraph\")"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/articles/dandelionR.html","id":"construct-pseudobulked-vdj-feature-space","dir":"Articles","previous_headings":"Foreword","what":"Construct pseudobulked VDJ feature space","title":"Single-cell Immune Repertoire Trajectory Analysis with dandelionR","text":"Next, construct pseudobulked VDJ feature space using neighbourhood graph constructed . also run PCA pseudobulked VDJ feature space. can visualise PCA pseudobulked VDJ feature space.","code":"pb.milo <- vdjPseudobulk(milo_object, col_to_take = \"anno_lvl_2_final_clean\")  # pbs = milo_object@nhoods pb.milo <- runPCA(pb.milo, assay.type = \"Feature_space\") plotPCA(pb.milo, color_by = \"anno_lvl_2_final_clean\")"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/articles/dandelionR.html","id":"tcr-trajectory-inference-using-absorbing-markov-chain","dir":"Articles","previous_headings":"Foreword","what":"TCR trajectory inference using Absorbing Markov Chain","title":"Single-cell Immune Repertoire Trajectory Analysis with dandelionR","text":"original dandelion python package, trajectory inference done using palantir package. , implement absorbing markov chain approach dandelionR infer trajectory, leveraging destiny diffusion map computation.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/articles/dandelionR.html","id":"define-root-and-branch-tips","dir":"Articles","previous_headings":"Foreword > TCR trajectory inference using Absorbing Markov Chain","what":"Define root and branch tips","title":"Single-cell Immune Repertoire Trajectory Analysis with dandelionR","text":"","code":"library(SingleCellExperiment)  # extract the PCA matrix pca <- t(as.matrix(reducedDim(pb.milo, type = \"PCA\"))) # define the CD8 terminal cell as the top-most cell and CD4 terminal cell as the bottom-most cell branch.tips <- c(which.max(pca[2, ]), which.min(pca[2, ])) names(branch.tips) <- c(\"CD8+T\", \"CD4+T\") # define the start of our trajectory as the left-most cell root <- which.min(pca[1, ])"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/articles/dandelionR.html","id":"construct-diffusion-map","dir":"Articles","previous_headings":"Foreword > TCR trajectory inference using Absorbing Markov Chain","what":"Construct diffusion map","title":"Single-cell Immune Repertoire Trajectory Analysis with dandelionR","text":"","code":"library(destiny) # Run diffusion map on the PCA dm <- DiffusionMap(t(pca), n_pcs = 50, n_eigs = 10)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/articles/dandelionR.html","id":"compute-diffussion-pseudotime-on-diffusion-map","dir":"Articles","previous_headings":"Foreword > TCR trajectory inference using Absorbing Markov Chain","what":"Compute diffussion pseudotime on diffusion map","title":"Single-cell Immune Repertoire Trajectory Analysis with dandelionR","text":"","code":"dif.pse <- DPT(dm, tips = c(root, branch.tips), w_width = 0.1) # the root is automatically called DPT + index of the root cell DPTroot <- paste0(\"DPT\", root) # store pseudotime in milo object pb.milo$pseudotime <- dif.pse[[DPTroot]] # set the colours for pseudotime pal <- colorRampPalette(rev((RColorBrewer::brewer.pal(9, \"RdYlBu\"))))(255) plotPCA(pb.milo, color_by = \"pseudotime\") + scale_colour_gradientn(colours = pal)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/articles/dandelionR.html","id":"markov-chain-construction-on-the-pseudobulk-vdj-feature-space","dir":"Articles","previous_headings":"Foreword > TCR trajectory inference using Absorbing Markov Chain","what":"Markov chain construction on the pseudobulk VDJ feature space","title":"Single-cell Immune Repertoire Trajectory Analysis with dandelionR","text":"","code":"pb.milo <- markovProbability(     milo = pb.milo,     diffusionmap = dm,     terminal_state = branch.tips,     root_cell = root,     pseudotime_key = \"pseudotime\" )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/articles/dandelionR.html","id":"visualising-branch-probabilities","dir":"Articles","previous_headings":"Foreword > TCR trajectory inference using Absorbing Markov Chain","what":"Visualising branch probabilities","title":"Single-cell Immune Repertoire Trajectory Analysis with dandelionR","text":"Markov chain probabilities computed, can visualise branch probabilities towards CD4+ CD8+ T-cell fate PCA plot.","code":"plotPCA(pb.milo, color_by = \"CD8+T\") + scale_color_gradientn(colors = pal) plotPCA(pb.milo, color_by = \"CD4+T\") + scale_color_gradientn(colors = pal)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/articles/dandelionR.html","id":"transfer","dir":"Articles","previous_headings":"Foreword","what":"Transfer","title":"Single-cell Immune Repertoire Trajectory Analysis with dandelionR","text":"next step project pseudotime branch probability information pseudobulks back cell dataset. cell belong pseudobulk, removed. cell belongs multiple pseudobulk samples, value calculated weighted average corresponding values pseudobulk, weight inverse size pseudobulk.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/articles/dandelionR.html","id":"project-pseudobulk-data-to-each-cell","dir":"Articles","previous_headings":"Foreword > Transfer","what":"Project pseudobulk data to each cell","title":"Single-cell Immune Repertoire Trajectory Analysis with dandelionR","text":"","code":"cdata <- projectPseudotimeToCell(milo_object, pb.milo, branch.tips)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/articles/dandelionR.html","id":"visualise-the-trajectory-data-on-a-per-cell-basis","dir":"Articles","previous_headings":"Foreword > Transfer","what":"Visualise the trajectory data on a per cell basis","title":"Single-cell Immune Repertoire Trajectory Analysis with dandelionR","text":"’s ! successfully inferred trajectory T-cells dataset!","code":"plotUMAP(cdata, color_by = \"anno_lvl_2_final_clean\", dimred = \"UMAP_knngraph\") plotUMAP(cdata, color_by = \"pseudotime\", dimred = \"UMAP_knngraph\") + scale_color_gradientn(colors = pal) plotUMAP(cdata, color_by = \"CD4+T\", dimred = \"UMAP_knngraph\") + scale_color_gradientn(colors = pal) plotUMAP(cdata, color_by = \"CD8+T\", dimred = \"UMAP_knngraph\") + scale_color_gradientn(colors = pal)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/articles/dandelionR.html","id":"session-info","dir":"Articles","previous_headings":"Foreword","what":"Session info","title":"Single-cell Immune Repertoire Trajectory Analysis with dandelionR","text":"","code":"sessionInfo() ## R version 4.4.2 (2024-10-31) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] destiny_3.20.0              miloR_2.2.0                 ##  [3] edgeR_4.4.1                 limma_3.62.1                ##  [5] scater_1.34.0               ggplot2_3.5.1               ##  [7] scuttle_1.16.0              SingleCellExperiment_1.28.1 ##  [9] SummarizedExperiment_1.36.0 Biobase_2.66.0              ## [11] GenomicRanges_1.58.0        GenomeInfoDb_1.42.1         ## [13] IRanges_2.40.0              S4Vectors_0.44.0            ## [15] BiocGenerics_0.52.0         MatrixGenerics_1.18.0       ## [17] matrixStats_1.4.1           dandelionR_0.99.0           ## [19] BiocStyle_2.34.0            ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.5                spatstat.sparse_3.1-0   httr_1.4.7              ##   [4] RColorBrewer_1.1-3      numDeriv_2016.8-1.1     tools_4.4.2             ##   [7] sctransform_0.4.1       utf8_1.2.4              R6_2.5.1                ##  [10] lazyeval_0.2.2          uwot_0.2.2              withr_3.0.2             ##  [13] sp_2.1-4                gridExtra_2.3           progressr_0.15.1        ##  [16] cli_3.6.3               textshaping_0.4.1       spatstat.explore_3.3-3  ##  [19] fastDummies_1.7.4       labeling_0.4.3          sass_0.4.9              ##  [22] Seurat_5.1.0            robustbase_0.99-4-1     spatstat.data_3.1-4     ##  [25] proxy_0.4-27            ggridges_0.5.6          pbapply_1.7-2           ##  [28] pkgdown_2.1.1           systemfonts_1.1.0       parallelly_1.40.1       ##  [31] TTR_0.24.4              generics_0.1.3          gtools_3.9.5            ##  [34] ica_1.0-3               spatstat.random_3.3-2   car_3.1-3               ##  [37] dplyr_1.1.4             Matrix_1.7-1            ggbeeswarm_0.7.2        ##  [40] fansi_1.0.6             abind_1.4-8             lifecycle_1.0.4         ##  [43] scatterplot3d_0.3-44    yaml_2.3.10             carData_3.0-5           ##  [46] SparseArray_1.6.0       Rtsne_0.17              grid_4.4.2              ##  [49] promises_1.3.2          crayon_1.5.3            miniUI_0.1.1.1          ##  [52] lattice_0.22-6          beachmat_2.22.0         cowplot_1.1.3           ##  [55] pillar_1.9.0            knitr_1.49              boot_1.3-31             ##  [58] future.apply_1.11.3     codetools_0.2-20        leiden_0.4.3.1          ##  [61] glue_1.8.0              spatstat.univar_3.1-1   pcaMethods_1.98.0       ##  [64] data.table_1.16.4       vcd_1.4-13              vctrs_0.6.5             ##  [67] png_0.1-8               spam_2.11-0             gtable_0.3.6            ##  [70] cachem_1.1.0            xfun_0.49               S4Arrays_1.6.0          ##  [73] mime_0.12               RcppEigen_0.3.4.0.2     tidygraph_1.3.1         ##  [76] pracma_2.4.4            survival_3.7-0          bluster_1.16.0          ##  [79] statmod_1.5.0           fitdistrplus_1.2-1      ROCR_1.0-11             ##  [82] nlme_3.1-166            xts_0.14.1              RcppAnnoy_0.0.22        ##  [85] bslib_0.8.0             irlba_2.3.5.1           vipor_0.4.7             ##  [88] KernSmooth_2.23-24      colorspace_2.1-1        nnet_7.3-19             ##  [91] smoother_1.3            tidyselect_1.2.1        curl_6.0.1              ##  [94] compiler_4.4.2          BiocNeighbors_2.0.1     desc_1.4.3              ##  [97] DelayedArray_0.32.0     plotly_4.10.4           scales_1.3.0            ## [100] hexbin_1.28.5           DEoptimR_1.1-3-1        lmtest_0.9-40           ## [103] stringr_1.5.1           digest_0.6.37           goftest_1.2-3           ## [106] spatstat.utils_3.1-1    rmarkdown_2.29          XVector_0.46.0          ## [109] htmltools_0.5.8.1       pkgconfig_2.0.3         fastmap_1.2.0           ## [112] ggthemes_5.1.0          rlang_1.1.4             htmlwidgets_1.6.4       ## [115] UCSC.utils_1.2.0        shiny_1.9.1             farver_2.1.2            ## [118] jquerylib_0.1.4         zoo_1.8-12              jsonlite_1.8.9          ## [121] BiocParallel_1.40.0     BiocSingular_1.22.0     magrittr_2.0.3          ## [124] Formula_1.2-5           GenomeInfoDbData_1.2.13 dotCall64_1.2           ## [127] patchwork_1.3.0         munsell_0.5.1           Rcpp_1.0.13-1           ## [130] viridis_0.6.5           reticulate_1.40.0       stringi_1.8.4           ## [133] ggraph_2.2.1            zlibbioc_1.52.0         MASS_7.3-61             ## [136] plyr_1.8.9              parallel_4.4.2          listenv_0.9.1           ## [139] ggrepel_0.9.6           deldir_2.0-4            graphlayouts_1.2.1      ## [142] splines_4.4.2           tensor_1.5              locfit_1.5-9.10         ## [145] igraph_2.1.1            ranger_0.17.0           spatstat.geom_3.3-4     ## [148] RcppHNSW_0.6.0          reshape2_1.4.4          ScaledMatrix_1.14.0     ## [151] evaluate_1.0.1          SeuratObject_5.0.2      BiocManager_1.30.25     ## [154] laeken_0.5.3            tweenr_2.0.3            httpuv_1.6.15           ## [157] VIM_6.2.2               RANN_2.6.2              tidyr_1.3.1             ## [160] purrr_1.0.2             polyclip_1.10-7         knn.covertree_1.0       ## [163] future_1.34.0           scattermore_1.2         ggforce_0.4.2           ## [166] rsvd_1.0.5              xtable_1.8-4            e1071_1.7-16            ## [169] RSpectra_0.16-2         later_1.4.1             viridisLite_0.4.2       ## [172] class_7.3-22            ragg_1.3.3              tibble_3.2.1            ## [175] memoise_2.0.1           beeswarm_0.4.0          cluster_2.1.6           ## [178] ggplot.multistats_1.0.1 globals_0.16.3"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jiawei Yu. Author. Nicholas Borcherding. Author. Kelvin Tuong. Author, maintainer.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Yu J, Borcherding N, Tuong K (2024). dandelionR: Single-cell Immune Repertoire Trajectory Analysis R. R package version 0.99.0, https://tuonglab.github.io/dandelionR/.","code":"@Manual{,   title = {dandelionR: Single-cell Immune Repertoire Trajectory Analysis in R},   author = {Jiawei Yu and Nicholas Borcherding and Kelvin Tuong},   year = {2024},   note = {R package version 0.99.0},   url = {https://tuonglab.github.io/dandelionR/}, }"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/index.html","id":"dandelionr","dir":"","previous_headings":"","what":"Single-cell Immune Repertoire Trajectory Analysis in R","title":"Single-cell Immune Repertoire Trajectory Analysis in R","text":"Welcome dandelionR! dandelionR R package performing single-cell immune repertoire trajectory analysis, based original python implementation dandelion. provides necessary tools interface scRepertoire custom implementation absorbing markov chain pseudotime inference, inspired based palantir python package.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Single-cell Immune Repertoire Trajectory Analysis in R","text":"can install dandelionR GitHub :","code":"if (!requireNamespace(\"devtools\", quietly = TRUE))     install.packages(\"devtools\") if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") devtools::install_github('tuonglab/dandelionR', dependencies = TRUE)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Single-cell Immune Repertoire Trajectory Analysis in R","text":"work progress, please feel free open issue encounter problems suggestions improvement.","code":"library(dandelionR)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/differentiationProbabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"differentiationProbabilities — differentiationProbabilities","title":"differentiationProbabilities — differentiationProbabilities","text":"function compute branch probabilities using markov chain","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/differentiationProbabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"differentiationProbabilities — differentiationProbabilities","text":"","code":"differentiationProbabilities(   wp_data,   terminal_states = NULL,   knn. = 30L,   pseudotime,   waypoints )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/differentiationProbabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"differentiationProbabilities — differentiationProbabilities","text":"wp_data Multi scale data waypoints terminal_states integer, NULL default. index terminal state. knn. integer, 30L default. Number nearest neighbors graph construction. pseudotime pseudotime ordering cells waypoints integer vector, index selected waypoint used construct markov chain","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/differentiationProbabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"differentiationProbabilities — differentiationProbabilities","text":"probabilities","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-classCheck.html","id":null,"dir":"Reference","previous_headings":"","what":".classCheck — .classCheck","title":".classCheck — .classCheck","text":"check whether input correct class","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-classCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".classCheck — .classCheck","text":"","code":".classCheck(input, must)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-classCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".classCheck — .classCheck","text":"input input need check must type need","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-constructMarkovChain.html","id":null,"dir":"Reference","previous_headings":"","what":".constructMarkovChain — .constructMarkovChain","title":".constructMarkovChain — .constructMarkovChain","text":"markov chain construction","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-constructMarkovChain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".constructMarkovChain — .constructMarkovChain","text":"","code":".constructMarkovChain(wp_data, knn., pseudotime, waypoints)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-constructMarkovChain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".constructMarkovChain — .constructMarkovChain","text":"wp_data Multi scale data waypoints knn. Number nearest neighbors graph construction pseudotime pseudotime ordering cells waypoints integer vector, index selected waypoint used construct markov chain","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-constructMarkovChain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".constructMarkovChain — .constructMarkovChain","text":"transition matrix markov chain","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-determineMultiscaleSpace.html","id":null,"dir":"Reference","previous_headings":"","what":".determineMultiscaleSpace — .determineMultiscaleSpace","title":".determineMultiscaleSpace — .determineMultiscaleSpace","text":".determineMultiscaleSpace","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-determineMultiscaleSpace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".determineMultiscaleSpace — .determineMultiscaleSpace","text":"","code":".determineMultiscaleSpace(diffusionmap, n_eigs = NULL)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-determineMultiscaleSpace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".determineMultiscaleSpace — .determineMultiscaleSpace","text":"diffusionmap DiffusionMap object n_eigs integer, default NULL. Number eigen vectors use. specified, number eigen vectors determined using eigen gap.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-determineMultiscaleSpace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".determineMultiscaleSpace — .determineMultiscaleSpace","text":"dataframe","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-filterCells.html","id":null,"dir":"Reference","previous_headings":"","what":".filterCells — .filterCells","title":".filterCells — .filterCells","text":"Helper function identifies filter_pattern hits determined column sce, either removes offeending cells masks matched values uniform value '(column's name)_missing'","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-filterCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".filterCells — .filterCells","text":"","code":".filterCells(   sce,   col_n,   filter_pattern = \",|None|No_cotig\",   remove_missing = TRUE )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-filterCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".filterCells — .filterCells","text":"sce SingleCellExperiment object, adata python data combineTCR， contain vdj seq col_n mode extraction V(D)J genes. filter_pattern character string, optional ',|None|No_contig' default remove_missing bool, True default true, remove cells contigs matching filter object. False, mask uniform value dependent column name.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-filterCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".filterCells — .filterCells","text":"filtered SingleCellExperiment object according parameter.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-getPbs.html","id":null,"dir":"Reference","previous_headings":"","what":".getPbs — .getPbs","title":".getPbs — .getPbs","text":"Helper function ensure cells pseudobulks matrix can use pseudobulking.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-getPbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".getPbs — .getPbs","text":"","code":".getPbs(pbs, col_to_bulk, milo)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-getPbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".getPbs — .getPbs","text":"pbs pbs parameter provided vdjPseudobulk(),  cells pseudobulks matrix NULL col_to_bulk col_to_bulk parameter provided vdjPseudobulk(), column's name colData milo milo SingleCellExperiment object","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-getPbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".getPbs — .getPbs","text":"cell x pseudobulk matrix","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-getPbsCol.html","id":null,"dir":"Reference","previous_headings":"","what":".getPbsCol — .getPbsCol","title":".getPbsCol — .getPbsCol","text":"Helper function create new pseudobulk object's coldata.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-getPbsCol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".getPbsCol — .getPbsCol","text":"","code":".getPbsCol(pbs, col_to_take, milo)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-getPbsCol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".getPbsCol — .getPbsCol","text":"pbs dgeMatrix, cell x pseudobulk binary matrix col_to_take character vector, names colData milo need processed milo Milo SingleCellExperiment object","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-getPbsCol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".getPbsCol — .getPbsCol","text":"pbs_col, DataFrame passed new SingleCellExperiment object colData vdj x pseudobulk assays","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-maxMinSampling.html","id":null,"dir":"Reference","previous_headings":"","what":".maxMinSampling — .maxMinSampling","title":".maxMinSampling — .maxMinSampling","text":"function max min sampling waypoints","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-maxMinSampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".maxMinSampling — .maxMinSampling","text":"","code":".maxMinSampling(data, num_waypoints)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-maxMinSampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".maxMinSampling — .maxMinSampling","text":"data data matrix along sample waypoints, usually diffusion components num_waypoints number waypoints sample","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-maxMinSampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".maxMinSampling — .maxMinSampling","text":"Series reprenting sampled waypoints","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-minMaxScale.html","id":null,"dir":"Reference","previous_headings":"","what":"minMaxScale — .minMaxScale","title":"minMaxScale — .minMaxScale","text":"scale value range 0 1","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-minMaxScale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"minMaxScale — .minMaxScale","text":"","code":".minMaxScale(data)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-minMaxScale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"minMaxScale — .minMaxScale","text":"data dataframe need scale","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-minMaxScale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"minMaxScale — .minMaxScale","text":"scaled value","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-terminalStateFromMarkovChain.html","id":null,"dir":"Reference","previous_headings":"","what":".terminalStateFromMarkovChain — .terminalStateFromMarkovChain","title":".terminalStateFromMarkovChain — .terminalStateFromMarkovChain","text":".terminalStateFromMarkovChain","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-terminalStateFromMarkovChain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".terminalStateFromMarkovChain — .terminalStateFromMarkovChain","text":"","code":".terminalStateFromMarkovChain(Transmat, wp_data, pseudotime, waypoints)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-terminalStateFromMarkovChain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".terminalStateFromMarkovChain — .terminalStateFromMarkovChain","text":"Transmat Transition matrix wp_data Multi scale data waypoints pseudotime numeric vector, pseudotime pseudobulk waypoints integer vector, waypoint selected construct markov chain.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-terminalStateFromMarkovChain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".terminalStateFromMarkovChain — .terminalStateFromMarkovChain","text":"terminal_state","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-typeCheck.html","id":null,"dir":"Reference","previous_headings":"","what":".typeCheck — .typeCheck","title":".typeCheck — .typeCheck","text":"check whether input correct type","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-typeCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".typeCheck — .typeCheck","text":"","code":".typeCheck(input, must)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/dot-typeCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".typeCheck — .typeCheck","text":"input input need check must type need","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/markovProbability.html","id":null,"dir":"Reference","previous_headings":"","what":"markovProbability — markovProbability","title":"markovProbability — markovProbability","text":"Preprocessing data Construct markov chain calculate probabilities","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/markovProbability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"markovProbability — markovProbability","text":"","code":"markovProbability(   milo,   diffusionmap,   diffusiontime = NULL,   terminal_state,   root_cell,   pseudotime_key = \"pseudotime\",   scale_components = TRUE,   num_waypoints = 500 )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/markovProbability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"markovProbability — markovProbability","text":"milo milo SingelCellExperiment object, pseudotime stored colData, used store result extract pseudotime. Pseudotime stored milo higher priority value provided diffusiontime parameter diffusionmap DiffusionMap object corresponds milo diffusiontime milo restore pseudotime, use parameter transfer function terminal_state index terminal state root_cell index root state pseudotime_key column name colData holds inferred pseudotime scale_components logical, True, components scale constructing markov chain num_waypoints integer, 500L default. Number waypoints sample construct markov chain.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/markovProbability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"markovProbability — markovProbability","text":"milo SinglCellExperiment object pseudotime, probabilities colData","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/markovProbability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"markovProbability — markovProbability","text":"","code":"data(sce_vdj) sce_vdj <- setupVdjPseudobulk(sce_vdj,     already.productive = FALSE ) #> Checking productivity from productive_abT_VDJ, productive_abT_VJ ... #> 23270 of cells filtered #> checking allowed chain status... #> 4 of cells filtered #> Extract main TCR from v_call_abT_VDJ, d_call_abT_VDJ, j_call_abT_VDJ, v_call_abT_VJ, j_call_abT_VJ ... #> Complete. #> Filtering cells from v_call_abT_VDJ_main, j_call_abT_VDJ_main, v_call_abT_VJ_main, j_call_abT_VJ_main ... #> 202 of cells filtered #> 8524 of cells remain. # Build Milo Object set.seed(100) traj_milo <- miloR::Milo(sce_vdj) milo_object <- miloR::buildGraph(traj_milo, k = 50, d = 20, reduced.dim = \"X_scvi\") #> Constructing kNN graph with k:50 milo_object <- miloR::makeNhoods(milo_object, reduced_dims = \"X_scvi\", d = 20) #> Checking valid object #> Running refined sampling with reduced_dim  # Construct Pseudobulked VDJ Feature Space pb.milo <- vdjPseudobulk(milo_object, col_to_take = \"anno_lvl_2_final_clean\") pb.milo <- scater::runPCA(pb.milo, assay.type = \"Feature_space\")  # Define root and branch tips pca <- t(as.matrix(SingleCellExperiment::reducedDim(pb.milo, type = \"PCA\"))) branch.tips <- c(232, 298) names(branch.tips) <- c(\"CD8+T\", \"CD4+T\") root <- 476  # Construct Diffusion Map dm <- destiny::DiffusionMap(t(pca), n_pcs = 50, n_eigs = 10) #> 'as(<dsCMatrix>, \"dgTMatrix\")' is deprecated. #> Use 'as(as(., \"generalMatrix\"), \"TsparseMatrix\")' instead. #> See help(\"Deprecated\") and help(\"Matrix-deprecated\"). dif.pse <- destiny::DPT(dm, tips = c(root, branch.tips), w_width = 0.1)  # Markov Chain Construction pb.milo <- markovProbability(     milo = pb.milo,     diffusionmap = dm,     diffusiontime = dif.pse[[paste0(\"DPT\", root)]],     terminal_state = branch.tips,     root_cell = root,     pseudotime_key = \"pseudotime\" ) #> Sampling and flocking waypoints... #> Markov chain construction... #> Loading required namespace: bluster #> Computing fundamental matrix and absorption probabilities... #> Project probabilites from waypoints to each pseudobulk..."},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/miloUmap.html","id":null,"dir":"Reference","previous_headings":"","what":"miloUmap — miloUmap","title":"miloUmap — miloUmap","text":"use function RunUMAP Seurat conduct umap adjacency matrix knn graph milo object","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/miloUmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"miloUmap — miloUmap","text":"","code":"miloUmap(   milo,   slot_name = \"UMAP_knngraph\",   n.neighbors = 50L,   metric = \"euclidean\" )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/miloUmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"miloUmap — miloUmap","text":"milo milo object knn graph needed conduct umap . slot_name character, default 'UMAP_knngraph'. slot name reduceDim result store n.neighbors integer, default 50L. number neighboring points used parameter RunUMAP, checking document detail metric character, default 'euclidean' choice metric used measure distance parameter RunUMAP, checking document detail","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/miloUmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"miloUmap — miloUmap","text":"milo object umap reduction","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/miloUmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"miloUmap — miloUmap","text":"","code":"data(sce_vdj) sce_vdj <- setupVdjPseudobulk(sce_vdj,     already.productive = FALSE ) #> Checking productivity from productive_abT_VDJ, productive_abT_VJ ... #> 23270 of cells filtered #> checking allowed chain status... #> 4 of cells filtered #> Extract main TCR from v_call_abT_VDJ, d_call_abT_VDJ, j_call_abT_VDJ, v_call_abT_VJ, j_call_abT_VJ ... #> Complete. #> Filtering cells from v_call_abT_VDJ_main, j_call_abT_VDJ_main, v_call_abT_VJ_main, j_call_abT_VJ_main ... #> 202 of cells filtered #> 8524 of cells remain. # Build Milo Object traj_milo <- miloR::Milo(sce_vdj) milo_object <- miloR::buildGraph(traj_milo, k = 50, d = 20, reduced.dim = \"X_scvi\") #> Constructing kNN graph with k:50 milo_object <- miloR::makeNhoods(milo_object, reduced_dims = \"X_scvi\", d = 20) #> Checking valid object #> Running refined sampling with reduced_dim  # Construct UMAP on Milo Neighbor Graph milo_object <- miloUmap(milo_object) #> Loading required namespace: Seurat #> Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric #> To use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation' #> This message will be shown once per session #> 00:36:53 UMAP embedding parameters a = 0.9922 b = 1.112 #> 00:36:53 Read 8524 rows of sparse distance matrix #> 00:36:53 Finding nearest neighbors from sparse matrix #> 00:37:04 Commencing smooth kNN distance calibration using 1 thread #>  with target n_neighbors = 50 #> 00:37:04 8524 smooth knn distance failures #> 00:37:06 Initializing from normalized Laplacian + noise (using RSpectra) #> 00:37:06 Commencing optimization for 500 epochs, with 544394 positive edges #> 00:38:02 Optimization finished #> Warning: No assay specified, setting assay as RNA by default."},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/projectProbability.html","id":null,"dir":"Reference","previous_headings":"","what":"projectProbability — projectProbability","title":"projectProbability — projectProbability","text":"project probabilities Markov chain pseudobulk","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/projectProbability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"projectProbability — projectProbability","text":"","code":"projectProbability(diffusionmap, waypoints, probabilities, t = 1)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/projectProbability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"projectProbability — projectProbability","text":"diffusionmap diffusion map, used reconstruct diffustion distance matrix waypoints index waypoints probabilities waypoints' probabilities, result markov chain t diffusion time","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/projectProbability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"projectProbability — projectProbability","text":"pseudobulk's probabilites","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/projectPseudotimeToCell.html","id":null,"dir":"Reference","previous_headings":"","what":"projectPseudotimeToCell — projectPseudotimeToCell","title":"projectPseudotimeToCell — projectPseudotimeToCell","text":"Function project pseudotime & branch probabilities pb.milo (pseudobulk) milo (cell).","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/projectPseudotimeToCell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"projectPseudotimeToCell — projectPseudotimeToCell","text":"","code":"projectPseudotimeToCell(milo, pb_milo, term_states, suffix = \"\")"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/projectPseudotimeToCell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"projectPseudotimeToCell — projectPseudotimeToCell","text":"milo SingleCellExperiment milo object pb_milo pseudobulk data term_states vector terminal states branch_probabilities transferred suffix suffix added added column names, default ”","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/projectPseudotimeToCell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"projectPseudotimeToCell — projectPseudotimeToCell","text":"subset milo SingleCellExperiment object cell belong neighbourhood removed projected pseudotime information stored colData","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/projectPseudotimeToCell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"projectPseudotimeToCell — projectPseudotimeToCell","text":"","code":"data(sce_vdj) sce_vdj <- setupVdjPseudobulk(sce_vdj,     already.productive = FALSE ) #> Checking productivity from productive_abT_VDJ, productive_abT_VJ ... #> 23270 of cells filtered #> checking allowed chain status... #> 4 of cells filtered #> Extract main TCR from v_call_abT_VDJ, d_call_abT_VDJ, j_call_abT_VDJ, v_call_abT_VJ, j_call_abT_VJ ... #> Complete. #> Filtering cells from v_call_abT_VDJ_main, j_call_abT_VDJ_main, v_call_abT_VJ_main, j_call_abT_VJ_main ... #> 202 of cells filtered #> 8524 of cells remain. # Build Milo Object set.seed(100) traj_milo <- miloR::Milo(sce_vdj) milo_object <- miloR::buildGraph(traj_milo, k = 50, d = 20, reduced.dim = \"X_scvi\") #> Constructing kNN graph with k:50 milo_object <- miloR::makeNhoods(milo_object, reduced_dims = \"X_scvi\", d = 20) #> Checking valid object #> Running refined sampling with reduced_dim  # Construct Pseudobulked VDJ Feature Space pb.milo <- vdjPseudobulk(milo_object, col_to_take = \"anno_lvl_2_final_clean\") pb.milo <- scater::runPCA(pb.milo, assay.type = \"Feature_space\")  # Define root and branch tips pca <- t(as.matrix(SingleCellExperiment::reducedDim(pb.milo, type = \"PCA\"))) branch.tips <- c(232, 298) names(branch.tips) <- c(\"CD8+T\", \"CD4+T\") root <- 476  # Construct Diffusion Map dm <- destiny::DiffusionMap(t(pca), n_pcs = 50, n_eigs = 10) dif.pse <- destiny::DPT(dm, tips = c(root, branch.tips), w_width = 0.1)  # Markov Chain Construction pb.milo <- markovProbability(     milo = pb.milo,     diffusionmap = dm,     terminal_state = branch.tips,     diffusiontime = dif.pse[[paste0(\"DPT\", root)]],     root_cell = root,     pseudotime_key = \"pseudotime\" ) #> Sampling and flocking waypoints... #> Markov chain construction... #> Computing fundamental matrix and absorption probabilities... #> Project probabilites from waypoints to each pseudobulk...  # Project Pseudobulk Data projected_milo <- projectPseudotimeToCell(milo_object, pb.milo, branch.tips) #> 17 number of cells removed due to not belonging to any neighbourhood"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/sce_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"demo data used in vignettes — sce_vdj","title":"demo data used in vignettes — sce_vdj","text":"sce_vdj - -sampled demo data Suo et al 2024 Nature Biotechnology. See https://www.nature.com/articles/s41587-023-01734-7","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/sce_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"demo data used in vignettes — sce_vdj","text":"","code":"data(sce_vdj)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/sce_vdj.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"demo data used in vignettes — sce_vdj","text":"SingleCellExperiment object following slots filled colData DataFrame containing metadata sample, corresponding obs AnnData python. describe column used vignette: productive_(mode)_VDJ, productive_(mode)_VJ factor containing information whether heavy/light chain productive mode: mode extraction V(D)J genes, 'abT'(TCRαβ), 'gdT'(TCRγδ) 'B'(BCR) Gene segment fields pattern like (v/d/j)_call_(mode)_(VDJ/VJ) example: v_call_abT_VDJ: V gene TCRαβ VDJ recombination d_call_abT_VJ: D gene TCRαβ VJ recombination chain_status status receptor chain anno_lvl_2_final_clean cell type annotation int_colData DataFrame contains metadata sample, mostly additional assay important analysis. int_colData reduction matrix X_scvi: result scVI model reduction UMAP: result umap reduction","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/sce_vdj.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"demo data used in vignettes — sce_vdj","text":"https://www.nature.com/articles/s41587-023-01734-7","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/sce_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"demo data used in vignettes — sce_vdj","text":"","code":"data(sce_vdj)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/setupVdjPseudobulk.html","id":null,"dir":"Reference","previous_headings":"","what":"setupVdjPseudobulk — setupVdjPseudobulk","title":"setupVdjPseudobulk — setupVdjPseudobulk","text":"Function data preprocessing. function filters data based productivity, chain status, subsets data, extracts main v(d)j, removes unmapping data","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/setupVdjPseudobulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"setupVdjPseudobulk — setupVdjPseudobulk","text":"","code":"setupVdjPseudobulk(   sce,   mode_option = c(\"abT\", \"gdT\", \"B\"),   already.productive = TRUE,   productive_cols = NULL,   productive_vj = TRUE,   productive_vdj = TRUE,   allowed_chain_status = c(\"Single pair\", \"Extra pair\", \"Extra pair-exception\",     \"Orphan VDJ\", \"Orphan VDJ-exception\"),   subsetby = NULL,   groups = NULL,   extract_cols = NULL,   filter_pattern = \",|None|No_cotig\",   check_vj_mapping = c(\"v_call\", \"j_call\"),   check_vdj_mapping = c(\"v_call\", \"j_call\"),   check_extract_cols_mapping = NULL,   remove_missing = TRUE )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/setupVdjPseudobulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"setupVdjPseudobulk — setupVdjPseudobulk","text":"sce SingleCellExperiment object, vdj data contained colData filtering mode_option optional, mode extraction V(D)J genes. already.productive logical, whether data already filtered productivity. productive_cols character vector, names colData used productivity filtering, NULL default productive_vj logical, TRUE default. Option productivity filtering.  True, cell kept main VJ chain productive productive_vdj logical, TRUE default. Option productivity filtering.  True, cell kept main VDJ chain productive allowed_chain_status character vectors, optional, specified, element within c('single pair','Extra pair', 'Extra pair-exceptipn', 'Orphan VDJ','Orphan VDJ-exception') subsetby character, NULL default, name one colData provided sub-setting. groups character vector, NULL default, condition sub-setting extract_cols character vector, NULL default. colData names VDJ/VJ information stored, colData used instead standard colData filter_pattern character, optional, ',|None|No_contig' default. check_vj_mapping character vector, optional. elements come c('v_call', 'j_call'), c('v_call', 'j_call') default. check_vdj_mapping character vector, optional. elements come c('v_call','d_call', 'j_call'), c('v_call', 'j_call') default. check_extract_cols_mapping character vecter, NULL default remove_missing bool, True default","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/setupVdjPseudobulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"setupVdjPseudobulk — setupVdjPseudobulk","text":"filtered SingleCellExperiment object","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/setupVdjPseudobulk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"setupVdjPseudobulk — setupVdjPseudobulk","text":"data undergo several process, including productivity filtering, chain status filtering, subseting, main TCR extracting, unmapping data removing. parameters productivity filtering: already.productive true, function skip productivity filtering false, retain productive entries columns specified mode_option productive_cols mode_option function check colData(s) named productive_{mode_option}_{type}, type 'VDJ' 'VJ' , depending values productive_vj productive_vdj. set 'NULL', function needs option 'extract_cols' specified productive_cols must specified productivity filtering need conduct mode_option NULL. VDJ/VJ information stored used instead standard columns. productive_vj, productive_vdj True, cell kept main V(D)J chain productive parameter chain status filtering: allowed_chain_status, chain status kept parameters subsetting: subsetby, groups subsetting process conducted parameters provided. subsetting, cell {groups} feature {subsetby} used computing VDJ feature space parameter main v(d)j extraction: extract_cols parameters unmapping filtering: filter_pattern pattern filtered form object. set NULL, unmaping filtering procees start check_vj_mapping, check_vdj_mapping colData specified arguments (check_vj_mapping check_vdj_mapping) checked unclear mappings check_extract_cols_mapping, related extract_cols colData specified argument checked unclear mapping, colData first specified extract_cols remove_missing true, remove cells contigs matching filter object. False, mask uniform value dependent column name.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/setupVdjPseudobulk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"setupVdjPseudobulk — setupVdjPseudobulk","text":"","code":"# load data data(sce_vdj) # check the dimension dim(sce_vdj) #> [1] 33538 32000 # filtered the data sce_vdj <- setupVdjPseudobulk(     sce = sce_vdj,     mode_option = \"abT\", # set the mode to αβTCR     already.productive = FALSE ) # need to filter the unproductive cells #> Checking productivity from productive_abT_VDJ, productive_abT_VJ ... #> 23270 of cells filtered #> checking allowed chain status... #> 4 of cells filtered #> Extract main TCR from v_call_abT_VDJ, d_call_abT_VDJ, j_call_abT_VDJ, v_call_abT_VJ, j_call_abT_VJ ... #> Complete. #> Filtering cells from v_call_abT_VDJ_main, j_call_abT_VDJ_main, v_call_abT_VJ_main, j_call_abT_VJ_main ... #> 202 of cells filtered #> 8524 of cells remain. # check the remaining dim dim(sce_vdj) #> [1] 33538  8524"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/vdjPseudobulk.html","id":null,"dir":"Reference","previous_headings":"","what":"vdjPseudobulk — vdjPseudobulk","title":"vdjPseudobulk — vdjPseudobulk","text":"making pseudobulk vdj feature space","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/vdjPseudobulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vdjPseudobulk — vdjPseudobulk","text":"","code":"vdjPseudobulk(   milo,   pbs = NULL,   col_to_bulk = NULL,   extract_cols = c(\"v_call_abT_VDJ_main\", \"j_call_abT_VDJ_main\", \"v_call_abT_VJ_main\",     \"j_call_abT_VJ_main\"),   mode_option = c(\"abT\", \"gdT\", \"B\"),   col_to_take = NULL,   normalise = TRUE,   renormalise = FALSE,   min_count = 1L )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/vdjPseudobulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vdjPseudobulk — vdjPseudobulk","text":"milo milo object SingleCellExperiment object pbs Optional binary matrix cells rows pseudobulk groups columns, milo milo object, need provide milo SingleCellExperiment object, user provide either pbs col_to_bulk col_to_bulk character character vector, NULL default Optional colData column(s) generate pbs, multiple provided, combined milo milo object, need provide milo SingleCellExperiment object, user provide either pbs col_to_bulk extract_cols character vector default value c('v_call_abT_VDJ_main', 'j_call_abT_VDJ_main', 'v_call_abT_VJ_main', 'j_call_abT_VJ_main') Column names VDJ/VJ information stored used instead standard columns. mode_option, must one element vector c('B','abT','gdT'), 'abT' default Note: set extract_cols NULL, argument considered! Optional mode extracting V(D)J genes. set NULL, use e.g. v_call_VD` instead v_call_abT_VDJ. col_to_take str list str, NULL default Optional obs column(s) identify common value pseudobulk. normalise bool, True default True, scale counts V(D)J gene group 1 pseudobulk. renormalise bool, False default True, re-scale counts V(D)J gene group 1 pseudobulk 'missing' calls removed. Relevant normalise True, setupVdjPseudobulk() ran remove_missing set False. min_count int, 1 default Pseudobulks fewer many non-'missing' calls V(D)J gene group non-'missing' calls set 0 group. Relevant normalise True.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/vdjPseudobulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vdjPseudobulk — vdjPseudobulk","text":"SingleCellExperiment object ...","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr22/reference/vdjPseudobulk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vdjPseudobulk — vdjPseudobulk","text":"","code":"data(sce_vdj) sce_vdj <- setupVdjPseudobulk(sce_vdj,     already.productive = FALSE ) #> Checking productivity from productive_abT_VDJ, productive_abT_VJ ... #> 23270 of cells filtered #> checking allowed chain status... #> 4 of cells filtered #> Extract main TCR from v_call_abT_VDJ, d_call_abT_VDJ, j_call_abT_VDJ, v_call_abT_VJ, j_call_abT_VJ ... #> Complete. #> Filtering cells from v_call_abT_VDJ_main, j_call_abT_VDJ_main, v_call_abT_VJ_main, j_call_abT_VJ_main ... #> 202 of cells filtered #> 8524 of cells remain. # Build Milo Object traj_milo <- miloR::Milo(sce_vdj) milo_object <- miloR::buildGraph(traj_milo, k = 50, d = 20, reduced.dim = \"X_scvi\") #> Constructing kNN graph with k:50 milo_object <- miloR::makeNhoods(milo_object, reduced_dims = \"X_scvi\", d = 20) #> Checking valid object #> Running refined sampling with reduced_dim  # Construct pseudobulked VDJ feature space pb.milo <- vdjPseudobulk(milo_object, col_to_take = \"anno_lvl_2_final_clean\")"}]
