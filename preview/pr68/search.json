[{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"foreword","dir":"Articles","previous_headings":"","what":"Foreword","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"Welcome dandelionR! dandelionR R package performing single-cell immune repertoire trajectory analysis, based original python implementation dandelion. provides necessary tools interface scRepertoire custom implementation absorbing markov chain pseudotime inference, inspired based palantir python package. work progress, please feel free open issue encounter problems suggestions improvement.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"can install dandelionR :","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"bioconductor","dir":"Articles","previous_headings":"Installation","what":"Bioconductor","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") } # The following initializes usage of Bioc devel BiocManager::install(version = \"devel\")  BiocManager::install(\"dandelionR\")"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"development-version-github","dir":"Articles","previous_headings":"Installation","what":"Development version (GitHub)","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"standard analysis workflow R, users probably choose read VDJ data scRepertoire. vignette, demonstrate perform TCR trajectory analysis starting ‘raw’ data .e. just standard single-cell gene expression data (stored SingleCellExperiment) VDJ data (AIRR format). Install scater scRepertoire haven’t already.","code":"if (!requireNamespace(\"devtools\", quietly = TRUE)) {     install.packages(\"devtools\") } devtools::install_github(\"tuonglab/dandelionR\", dependencies = TRUE) # only for the tutorial if (!requireNamespace(\"scater\", quietly = TRUE)) {     BiocManager::install(\"scater\") } if (!requireNamespace(\"scRepertoire\", quietly = TRUE)) {     BiocManager::install(\"scRepertoire\") } # or devtools::install_github(\"ncborcherding/scRepertoire\")"},{"path":[]},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"load-the-required-libraries","dir":"Articles","previous_headings":"Usage","what":"Load the required libraries","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"","code":"library(dandelionR) library(scRepertoire) library(scater)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"load-the-demo-data","dir":"Articles","previous_headings":"Usage","what":"Load the demo data","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"Due size limitations package, provided trimmed version demo data ~2000 cells. full dataset can found accordingly: GEX (Lymphoid Cells) - https://developmental.cellatlas.io/fetal-immune VDJ - https://github.com/zktuong/dandelion-demo-files/ VDJ data dandelion_manuscript/data/dandelion-remap folder. Check vignette example dataset starts original dandelion output associated original manuscript. also set seed plots results consistent.","code":"data(demo_sce) data(demo_airr) vignette(\"vignette_reproduce_original\") set.seed(123)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"use-screpertoire-to-load-the-vdj-data","dir":"Articles","previous_headings":"","what":"Use scRepertoire to load the VDJ data","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"trajectory analysis work , focusing main productive TCR chains. Therefore flag filterMulti = TRUE, keep selection 2 corresponding chains highest expression single barcode. details, refer scRepertoire’s docs.","code":"contig.list <- loadContigs(input = demo_airr, format = \"AIRR\")  # Format to `scRepertoire`'s requirements and some light filtering combined.TCR <- combineTCR(contig.list,     removeNA = TRUE,     removeMulti = FALSE,     filterMulti = TRUE )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"merging-vdj-data-with-gene-expression-data","dir":"Articles","previous_headings":"Use scRepertoire to load the VDJ data","what":"Merging VDJ data with gene expression data","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"Next combine gene expression data VDJ data create SingleCellExperiment object.","code":"sce <- combineExpression(combined.TCR, demo_sce)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"initiate-dandelionr-workflow","dir":"Articles","previous_headings":"","what":"Initiate dandelionR workflow","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":", data ready used pseudobulk trajectory analysis workflow dandelionR. alpha-beta TCR data, set mode_option “abT”. append abT relevant columns holding VDJ gene information. going try types VDJ data e.g. BCR, set mode_option “B” instead. argument consistently set vdjPseudobulk function later. Since TCR data already filtered productive chains combineTCR, set already.productive = TRUE can keep allowed_chain_status NULL. also subset data include main T-cell types: CD8+T, CD4+T, ABT(ENTRY), DP(P)_T, DP(Q)_T. main output function SingleCellExperiment object relevant VDJ information appended colData, particularly columns _main suffix e.g. v_call_abT_VJ_main, j_call_abT_VJ_main etc. Visualise UMAP filtered data.","code":"sce <- setupVdjPseudobulk(sce,     mode_option = \"abT\",     already.productive = TRUE,     subsetby = \"anno_lvl_2_final_clean\",     groups = c(\"CD8+T\", \"CD4+T\", \"ABT(ENTRY)\", \"DP(P)_T\", \"DP(Q)_T\") ) head(colData(sce)) ## DataFrame with 6 rows and 35 columns ##                                  n_counts   n_genes           file      mito ##                                 <numeric> <integer>       <factor> <numeric> ## FCAImmP7851891-CCTACCATCGGACAAG      2947      1275 FCAImmP7851891 0.0105192 ## FCAImmP7851892-ACGGGCTCAGCATGAG      4969      1971 FCAImmP7851892 0.0245522 ## FCAImmP7803035-CCAGCGATCCGAAGAG      7230      1733 FCAImmP7803035 0.0302905 ## FCAImmP7528296-ATAAGAGTCAAAGACA      2504       901 FCAImmP7528296 0.0207668 ## FCAImmP7555860-AACTTTCTCAACGGGA      8689      2037 FCAImmP7555860 0.0357924 ## FCAImmP7292034-CGTCACTGTGGTCTCG      3111      1254 FCAImmP7292034 0.0228222 ##                                 doublet_scores predicted_doublets ##                                      <numeric>           <factor> ## FCAImmP7851891-CCTACCATCGGACAAG      0.0439224              False ## FCAImmP7851892-ACGGGCTCAGCATGAG      0.0610687              False ## FCAImmP7803035-CCAGCGATCCGAAGAG      0.0383747              False ## FCAImmP7528296-ATAAGAGTCAAAGACA      0.0236220              False ## FCAImmP7555860-AACTTTCTCAACGGGA      0.0738255              False ## FCAImmP7292034-CGTCACTGTGGTCTCG      0.0222841              False ##                                 old_annotation_uniform    organ  Sort_id ##                                               <factor> <factor> <factor> ## FCAImmP7851891-CCTACCATCGGACAAG              SP T CELL       TH    TOT   ## FCAImmP7851892-ACGGGCTCAGCATGAG              DP T CELL       TH    TOT   ## FCAImmP7803035-CCAGCGATCCGAAGAG              SP T CELL       SK    CD45P ## FCAImmP7528296-ATAAGAGTCAAAGACA              SP T CELL       SK    CD45P ## FCAImmP7555860-AACTTTCTCAACGGGA              SP T CELL       TH    CD45P ## FCAImmP7292034-CGTCACTGTGGTCTCG              SP T CELL       TH    TOT   ##                                       age   method    donor      sex ##                                 <integer> <factor> <factor> <factor> ## FCAImmP7851891-CCTACCATCGGACAAG        11     5GEX      F64   female ## FCAImmP7851892-ACGGGCTCAGCATGAG        12     5GEX      F67   female ## FCAImmP7803035-CCAGCGATCCGAAGAG        14     5GEX      F51   female ## FCAImmP7528296-ATAAGAGTCAAAGACA        12     5GEX      F38   male   ## FCAImmP7555860-AACTTTCTCAACGGGA        16     5GEX      F41   female ## FCAImmP7292034-CGTCACTGTGGTCTCG        14     5GEX      F30   male   ##                                                      Sample scvi_clusters ##                                                    <factor>      <factor> ## FCAImmP7851891-CCTACCATCGGACAAG F64_TH_TOT_FCAImmP7851891              14 ## FCAImmP7851892-ACGGGCTCAGCATGAG F67_TH_TOT_FCAImmP7851892              4  ## FCAImmP7803035-CCAGCGATCCGAAGAG F51_SK_CD45P_FCAImmP7803035            2  ## FCAImmP7528296-ATAAGAGTCAAAGACA F38_SK_CD45P_FCAImmP7528296            2  ## FCAImmP7555860-AACTTTCTCAACGGGA F41_TH_CD45P_FCAImmP7555860            2  ## FCAImmP7292034-CGTCACTGTGGTCTCG F30_TH_TOT_FCAImmP7292034              14 ##                                 is_maternal_contaminant anno_lvl_2_final_clean ##                                               <logical>               <factor> ## FCAImmP7851891-CCTACCATCGGACAAG                   FALSE             ABT(ENTRY) ## FCAImmP7851892-ACGGGCTCAGCATGAG                   FALSE             DP(Q)_T    ## FCAImmP7803035-CCAGCGATCCGAAGAG                   FALSE             CD4+T      ## FCAImmP7528296-ATAAGAGTCAAAGACA                   FALSE             CD4+T      ## FCAImmP7555860-AACTTTCTCAACGGGA                   FALSE             CD4+T      ## FCAImmP7292034-CGTCACTGTGGTCTCG                   FALSE             ABT(ENTRY) ##                                 celltype_annotation                 CTgene ##                                            <factor>            <character> ## FCAImmP7851891-CCTACCATCGGACAAG          ABT(ENTRY) TRAV13-1*02.TRAJ34*0.. ## FCAImmP7851892-ACGGGCTCAGCATGAG          DP(Q)_T    TRAV12-2*01.TRAJ53*0.. ## FCAImmP7803035-CCAGCGATCCGAAGAG          CD4+T      TRAV21*02.TRAJ33*01... ## FCAImmP7528296-ATAAGAGTCAAAGACA          CD4+T      TRAV38-2/DV8*01.TRAJ.. ## FCAImmP7555860-AACTTTCTCAACGGGA          CD4+T      TRAV12-1*01.TRAJ6*01.. ## FCAImmP7292034-CGTCACTGTGGTCTCG          ABT(ENTRY) TRAV1-1*01.TRAJ32*02.. ##                                                   CTnt                   CTaa ##                                            <character>            <character> ## FCAImmP7851891-CCTACCATCGGACAAG TGTGCAGCAAGTATGAACAC.. CAASMNTDKLIF_CASSLTG.. ## FCAImmP7851892-ACGGGCTCAGCATGAG TGTGCCGTGTGGAGGTAGCA.. CAVWR*QL*TDI_CASRTGN.. ## FCAImmP7803035-CCAGCGATCCGAAGAG TGTGCTTCTATGGATAGCAA.. CASMDSNYQLIW_CASSLTS.. ## FCAImmP7528296-ATAAGAGTCAAAGACA TGTGCTTATAGGAGCGTTCA.. CAYRSVQGAQKLVF_CASSW.. ## FCAImmP7555860-AACTTTCTCAACGGGA TGTGTGGTGAACATAAGAGG.. CVVNIRGSYIPTF_CSARDL.. ## FCAImmP7292034-CGTCACTGTGGTCTCG TGCGCTGTGAGAGATCAGTA.. CAVRDQYGGATNKLIF_CAS.. ##                                               CTstrict clonalProportion ##                                            <character>        <numeric> ## FCAImmP7851891-CCTACCATCGGACAAG TRAV13-1*02.TRAJ34*0..        0.0416667 ## FCAImmP7851892-ACGGGCTCAGCATGAG TRAV12-2*01.TRAJ53*0..        0.0277778 ## FCAImmP7803035-CCAGCGATCCGAAGAG TRAV21*02.TRAJ33*01...        0.0370370 ## FCAImmP7528296-ATAAGAGTCAAAGACA TRAV38-2/DV8*01.TRAJ..        0.0909091 ## FCAImmP7555860-AACTTTCTCAACGGGA TRAV12-1*01.TRAJ6*01..        0.0476190 ## FCAImmP7292034-CGTCACTGTGGTCTCG TRAV1-1*01.TRAJ32*02..        0.0204082 ##                                 clonalFrequency               cloneSize ##                                       <integer>                <factor> ## FCAImmP7851891-CCTACCATCGGACAAG               1 Large (0.01 < X <= 0.1) ## FCAImmP7851892-ACGGGCTCAGCATGAG               1 Large (0.01 < X <= 0.1) ## FCAImmP7803035-CCAGCGATCCGAAGAG               1 Large (0.01 < X <= 0.1) ## FCAImmP7528296-ATAAGAGTCAAAGACA               1 Large (0.01 < X <= 0.1) ## FCAImmP7555860-AACTTTCTCAACGGGA               1 Large (0.01 < X <= 0.1) ## FCAImmP7292034-CGTCACTGTGGTCTCG               1 Large (0.01 < X <= 0.1) ##                                  v_call_abT_VDJ d_call_abT_VDJ j_call_abT_VDJ ##                                     <character>    <character>    <character> ## FCAImmP7851891-CCTACCATCGGACAAG     TRAV13-1*02      TRAJ34*01    TRBV11-3*04 ## FCAImmP7851892-ACGGGCTCAGCATGAG     TRAV12-2*01      TRAJ53*01      TRBV19*01 ## FCAImmP7803035-CCAGCGATCCGAAGAG       TRAV21*02      TRAJ33*01     TRBV5-4*01 ## FCAImmP7528296-ATAAGAGTCAAAGACA TRAV38-2/DV8*01      TRAJ54*01     TRBV6-6*01 ## FCAImmP7555860-AACTTTCTCAACGGGA     TRAV12-1*01       TRAJ6*01    TRBV20-1*01 ## FCAImmP7292034-CGTCACTGTGGTCTCG      TRAV1-1*01      TRAJ32*02    TRBV12-4*01 ##                                 v_call_abT_VJ j_call_abT_VJ v_call_abT_VDJ_main ##                                   <character>   <character>         <character> ## FCAImmP7851891-CCTACCATCGGACAAG      TRBD1*01    TRBJ1-2*01         TRAV13-1*02 ## FCAImmP7851892-ACGGGCTCAGCATGAG            NA    TRBJ1-1*01         TRAV12-2*01 ## FCAImmP7803035-CCAGCGATCCGAAGAG      TRBD2*02    TRBJ2-1*01           TRAV21*02 ## FCAImmP7528296-ATAAGAGTCAAAGACA            NA    TRBJ1-3*01     TRAV38-2/DV8*01 ## FCAImmP7555860-AACTTTCTCAACGGGA      TRBD2*02    TRBJ2-7*01         TRAV12-1*01 ## FCAImmP7292034-CGTCACTGTGGTCTCG            NA    TRBJ1-2*01          TRAV1-1*01 ##                                 d_call_abT_VDJ_main j_call_abT_VDJ_main ##                                         <character>         <character> ## FCAImmP7851891-CCTACCATCGGACAAG           TRAJ34*01         TRBV11-3*04 ## FCAImmP7851892-ACGGGCTCAGCATGAG           TRAJ53*01           TRBV19*01 ## FCAImmP7803035-CCAGCGATCCGAAGAG           TRAJ33*01          TRBV5-4*01 ## FCAImmP7528296-ATAAGAGTCAAAGACA           TRAJ54*01          TRBV6-6*01 ## FCAImmP7555860-AACTTTCTCAACGGGA            TRAJ6*01         TRBV20-1*01 ## FCAImmP7292034-CGTCACTGTGGTCTCG           TRAJ32*02         TRBV12-4*01 ##                                 v_call_abT_VJ_main j_call_abT_VJ_main ##                                        <character>        <character> ## FCAImmP7851891-CCTACCATCGGACAAG           TRBD1*01         TRBJ1-2*01 ## FCAImmP7851892-ACGGGCTCAGCATGAG                 NA         TRBJ1-1*01 ## FCAImmP7803035-CCAGCGATCCGAAGAG           TRBD2*02         TRBJ2-1*01 ## FCAImmP7528296-ATAAGAGTCAAAGACA                 NA         TRBJ1-3*01 ## FCAImmP7555860-AACTTTCTCAACGGGA           TRBD2*02         TRBJ2-7*01 ## FCAImmP7292034-CGTCACTGTGGTCTCG                 NA         TRBJ1-2*01 plotUMAP(sce, color_by = \"anno_lvl_2_final_clean\")"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"milo-object-and-neighbourhood-graph-construction","dir":"Articles","previous_headings":"Initiate dandelionR workflow","what":"Milo object and neighbourhood graph construction","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"use miloR create pseudobulks based gene expression data. goal construct neighbourhood graph many neighbors can sample representative neighbours form objects.","code":"library(miloR) milo_object <- Milo(sce) milo_object <- buildGraph(milo_object, k = 30, d = 20, reduced.dim = \"X_scvi\") milo_object <- makeNhoods(milo_object,     reduced_dims = \"X_scvi\", d = 20,     prop = 0.3 )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"construct-umap-on-milo-neighbor-graph","dir":"Articles","previous_headings":"Initiate dandelionR workflow","what":"Construct UMAP on milo neighbor graph","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"can visualise milo object using UMAP.","code":"milo_object <- miloUmap(milo_object, n_neighbors = 30) plotUMAP(milo_object,     color_by = \"anno_lvl_2_final_clean\",     dimred = \"UMAP_knngraph\" )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"construct-pseudobulked-vdj-feature-space","dir":"Articles","previous_headings":"","what":"Construct pseudobulked VDJ feature space","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"Next, construct pseudobulked VDJ feature space using neighbourhood graph constructed . also run PCA pseudobulked VDJ feature space. Inspect newly created pb.milo object. can compute visualise PCA pseudobulked VDJ feature space.","code":"pb.milo <- vdjPseudobulk(milo_object,     mode_option = \"abT\",     col_to_take = \"anno_lvl_2_final_clean\" ) pb.milo ## class: Milo  ## dim: 129 64  ## metadata(0): ## assays(1): Feature_space ## rownames(129): TRAV1-1*01 TRAV1-2*01 ... TRBJ2-7*01 TRBJ2-7*02 ## rowData names(0): ## colnames(64): 179 93 ... 269 125 ## colData names(3): anno_lvl_2_final_clean ##   anno_lvl_2_final_clean_fraction cell_count ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## nhoods dimensions(2): 64 382 ## nhoodCounts dimensions(2): 1 1 ## nhoodDistances dimension(1): 0 ## graph names(0): ## nhoodIndex names(1): 0 ## nhoodExpression dimension(2): 1 1 ## nhoodReducedDim names(0): ## nhoodGraph names(0): ## nhoodAdjacency dimension(2): 1 1 pb.milo <- runPCA(pb.milo, assay.type = \"Feature_space\", ncomponents = 20) plotPCA(pb.milo, color_by = \"anno_lvl_2_final_clean\")"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"tcr-trajectory-inference-using-absorbing-markov-chain","dir":"Articles","previous_headings":"Construct pseudobulked VDJ feature space","what":"TCR trajectory inference using Absorbing Markov Chain","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"original dandelion python package, trajectory inference done using palantir package. , implement absorbing markov chain approach dandelionR infer trajectory, leveraging destiny diffusion map computation.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"define-root-and-branch-tips","dir":"Articles","previous_headings":"Construct pseudobulked VDJ feature space > TCR trajectory inference using Absorbing Markov Chain","what":"Define root and branch tips","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"","code":"# extract the PCA matrix pca <- t(as.matrix(reducedDim(pb.milo, type = \"PCA\"))) # define the CD8 terminal cell as the top-most cell and CD4 terminal cell as # the bottom-most cell branch.tips <- c(which.max(pca[2, ]), which.min(pca[2, ])) names(branch.tips) <- c(\"CD8+T\", \"CD4+T\") # define the start of our trajectory as the right-most cell root <- which.max(pca[1, ])"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"construct-diffusion-map","dir":"Articles","previous_headings":"Construct pseudobulked VDJ feature space > TCR trajectory inference using Absorbing Markov Chain","what":"Construct diffusion map","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"","code":"library(destiny) # Run diffusion map on the PCA feature_space <- t(assay(pb.milo, \"Feature_space\")) dm <- DiffusionMap(as.matrix(feature_space), n_pcs = 50, n_eigs = 10)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"compute-diffusion-pseudotime-on-diffusion-map","dir":"Articles","previous_headings":"Construct pseudobulked VDJ feature space > TCR trajectory inference using Absorbing Markov Chain","what":"Compute diffusion pseudotime on diffusion map","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"","code":"dif.pse <- DPT(dm, tips = c(root, branch.tips), w_width = 0.1) # the root is automatically called DPT + index of the root cell DPTroot <- paste0(\"DPT\", root) # store pseudotime in milo object pb.milo$pseudotime <- dif.pse[[DPTroot]] # set the colours for pseudotime pal <- colorRampPalette(rev((RColorBrewer::brewer.pal(9, \"RdYlBu\"))))(255) plotPCA(pb.milo, color_by = \"pseudotime\") +     scale_colour_gradientn(colours = pal)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"markov-chain-construction-on-the-pseudobulk-vdj-feature-space","dir":"Articles","previous_headings":"","what":"Markov chain construction on the pseudobulk VDJ feature space","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"step compute Markov chain probabilities pseudobulk VDJ feature space. return branch probabilities colData column name corresponds branch tips defined earlier. Inspect pb.milo object see newly added columns.","code":"pb.milo <- markovProbability(     milo = pb.milo,     diffusionmap = dm,     terminal_state = branch.tips,     root_cell = root,     pseudotime_key = \"pseudotime\",     knn = 30 ) head(colData(pb.milo)) ## DataFrame with 6 rows and 6 columns ##     anno_lvl_2_final_clean anno_lvl_2_final_clean_fraction cell_count ##                <character>                       <numeric>  <numeric> ## 179              faDP(P)_T                        0.605263         38 ## 93                 faCD8+T                        0.750000         48 ## 75               faDP(Q)_T                        0.907407         54 ## 279              faDP(Q)_T                        0.913793         58 ## 277                faCD4+T                        0.936170         47 ## 375              faDP(P)_T                        0.632653         49 ##     pseudotime     CD8+T     CD4+T ##      <numeric> <numeric> <numeric> ## 179   0.264550  0.617397  0.382603 ## 93    1.626834  0.577501  0.422499 ## 75    0.885708  0.619747  0.380253 ## 279   0.847786  0.619628  0.380372 ## 277   1.308699  0.624315  0.375685 ## 375   0.200056  0.618155  0.381845"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"visualising-branch-probabilities","dir":"Articles","previous_headings":"","what":"Visualising branch probabilities","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"Markov chain probabilities computed, can visualise branch probabilities towards CD4+ CD8+ T-cell fate PCA plot.","code":"plotPCA(pb.milo, color_by = \"CD8+T\") + scale_color_gradientn(colors = pal) plotPCA(pb.milo, color_by = \"CD4+T\") + scale_color_gradientn(colors = pal)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"transfer","dir":"Articles","previous_headings":"","what":"Transfer","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"next step project pseudotime branch probability information pseudobulks back cell dataset. cell belong pseudobulk, removed. cell belongs multiple pseudobulk samples, value calculated weighted average corresponding values pseudobulk, weight inverse size pseudobulk.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"project-pseudobulk-data-to-each-cell","dir":"Articles","previous_headings":"Transfer","what":"Project pseudobulk data to each cell","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"","code":"cdata <- projectPseudotimeToCell(milo_object, pb.milo, branch.tips)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"visualise-the-trajectory-data-on-a-per-cell-basis","dir":"Articles","previous_headings":"Transfer","what":"Visualise the trajectory data on a per cell basis","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"’s ! successfully inferred trajectory T-cells dataset!","code":"plotUMAP(cdata, color_by = \"anno_lvl_2_final_clean\", dimred = \"UMAP_knngraph\") plotUMAP(cdata, color_by = \"pseudotime\", dimred = \"UMAP_knngraph\") +     scale_color_gradientn(colors = pal) plotUMAP(cdata, color_by = \"CD4+T\", dimred = \"UMAP_knngraph\") +     scale_color_gradientn(colors = pal) plotUMAP(cdata, color_by = \"CD8+T\", dimred = \"UMAP_knngraph\") +     scale_color_gradientn(colors = pal)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/dandelionR.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Single-cell immune repertoire trajectory analysis with dandelionR","text":"","code":"sessionInfo() ## R version 4.5.0 (2025-04-11) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.2 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] destiny_3.22.0              miloR_2.4.1                 ##  [3] edgeR_4.6.2                 limma_3.64.1                ##  [5] scater_1.36.0               scuttle_1.18.0              ##  [7] SingleCellExperiment_1.30.1 SummarizedExperiment_1.38.1 ##  [9] Biobase_2.68.0              GenomicRanges_1.60.0        ## [11] GenomeInfoDb_1.44.0         IRanges_2.42.0              ## [13] S4Vectors_0.46.0            BiocGenerics_0.54.0         ## [15] generics_0.1.4              MatrixGenerics_1.20.0       ## [17] matrixStats_1.5.0           scRepertoire_2.4.0          ## [19] ggplot2_3.5.2               dandelionR_0.99.11          ## [21] BiocStyle_2.36.0            ##  ## loaded via a namespace (and not attached): ##   [1] cubature_2.1.3          splines_4.5.0           tibble_3.2.1            ##   [4] polyclip_1.10-7         xts_0.14.1              lifecycle_1.0.4         ##   [7] globals_0.18.0          lattice_0.22-6          MASS_7.3-65             ##  [10] magrittr_2.0.3          vcd_1.4-13              sass_0.4.10             ##  [13] rmarkdown_2.29          jquerylib_0.1.4         yaml_2.3.10             ##  [16] spam_2.11-1             sp_2.2-0                cowplot_1.1.3           ##  [19] RColorBrewer_1.1-3      abind_1.4-8             purrr_1.0.4             ##  [22] ggraph_2.2.1            nnet_7.3-20             pracma_2.4.4            ##  [25] tweenr_2.0.3            evmix_2.12              GenomeInfoDbData_1.2.14 ##  [28] ggrepel_0.9.6           irlba_2.3.5.1           listenv_0.9.1           ##  [31] iNEXT_3.0.1             MatrixModels_0.5-4      RSpectra_0.16-2         ##  [34] parallelly_1.44.0       pkgdown_2.1.3           codetools_0.2-20        ##  [37] smoother_1.3            DelayedArray_0.34.1     ggforce_0.4.2           ##  [40] tidyselect_1.2.1        UCSC.utils_1.4.0        farver_2.1.2            ##  [43] ScaledMatrix_1.16.0     viridis_0.6.5           jsonlite_2.0.0          ##  [46] BiocNeighbors_2.2.0     e1071_1.7-16            tidygraph_1.3.1         ##  [49] progressr_0.15.1        Formula_1.2-5           survival_3.8-3          ##  [52] ggalluvial_0.12.5       systemfonts_1.2.3       tools_4.5.0             ##  [55] ragg_1.4.0              stringdist_0.9.15       Rcpp_1.0.14             ##  [58] glue_1.8.0              gridExtra_2.3           SparseArray_1.8.0       ##  [61] laeken_0.5.3            xfun_0.52               ranger_0.17.0           ##  [64] TTR_0.24.4              ggthemes_5.1.0          dplyr_1.1.4             ##  [67] withr_3.0.2             numDeriv_2016.8-1.1     BiocManager_1.30.25     ##  [70] fastmap_1.2.0           boot_1.3-31             bluster_1.18.0          ##  [73] SparseM_1.84-2          VIM_6.2.2               digest_0.6.37           ##  [76] rsvd_1.0.5              R6_2.6.1                textshaping_1.0.1       ##  [79] colorspace_2.1-1        gtools_3.9.5            tidyr_1.3.1             ##  [82] hexbin_1.28.5           data.table_1.17.4       robustbase_0.99-4-1     ##  [85] class_7.3-23            graphlayouts_1.2.2      httr_1.4.7              ##  [88] htmlwidgets_1.6.4       S4Arrays_1.8.0          scatterplot3d_0.3-44    ##  [91] uwot_0.2.3              pkgconfig_2.0.3         gtable_0.3.6            ##  [94] lmtest_0.9-40           XVector_0.48.0          htmltools_0.5.8.1       ##  [97] carData_3.0-5           dotCall64_1.2           bookdown_0.43           ## [100] SeuratObject_5.1.0      scales_1.4.0            knn.covertree_1.0       ## [103] ggdendro_0.2.0          knitr_1.50              rjson_0.2.23            ## [106] reshape2_1.4.4          curl_6.2.3              proxy_0.4-27            ## [109] cachem_1.1.0            zoo_1.8-14              stringr_1.5.1           ## [112] parallel_4.5.0          vipor_0.4.7             desc_1.4.3              ## [115] pillar_1.10.2           grid_4.5.0              vctrs_0.6.5             ## [118] RANN_2.6.2              pcaMethods_2.0.0        VGAM_1.1-13             ## [121] car_3.1-3               BiocSingular_1.24.0     beachmat_2.24.0         ## [124] cluster_2.1.8.1         beeswarm_0.4.0          evaluate_1.0.3          ## [127] truncdist_1.0-2         cli_3.6.5               locfit_1.5-9.12         ## [130] compiler_4.5.0          rlang_1.1.6             crayon_1.5.3            ## [133] future.apply_1.11.3     labeling_0.4.3          plyr_1.8.9              ## [136] fs_1.6.6                ggbeeswarm_0.7.2        stringi_1.8.7           ## [139] viridisLite_0.4.2       BiocParallel_1.42.0     assertthat_0.2.1        ## [142] gsl_2.1-8               quantreg_6.1            Matrix_1.7-3            ## [145] RcppHNSW_0.6.0          RcppEigen_0.3.4.0.2     patchwork_1.3.0         ## [148] future_1.49.0           statmod_1.5.0           evd_2.3-7.1             ## [151] igraph_2.1.4            memoise_2.0.1           bslib_0.9.0             ## [154] DEoptimR_1.1-3-1        ggplot.multistats_1.0.1"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/vignette_reproduce_original.html","id":"load-the-required-libraries","dir":"Articles","previous_headings":"","what":"Load the required libraries","title":"Reproducing the original dandelion method/paper","text":"also load scRepertoire scater analysis.","code":"library(dandelionR) library(scRepertoire) library(scater)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/vignette_reproduce_original.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Reproducing the original dandelion method/paper","text":"First, load demo data. -sampled dataset Suo et al 2024. contains 10,000 cells TCR information dimensionality reduced data (scVI) need tutorial. gene expression matrix required tutorial included demo data. show separate tutorial start data scRepertoire. set seed plots results consistent.","code":"data(sce_vdj) set.seed(100)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/vignette_reproduce_original.html","id":"filter-the-data","dir":"Articles","previous_headings":"","what":"Filter the data","title":"Reproducing the original dandelion method/paper","text":"begin, filter data extract TCR information can construct pseudobulks. colData single-cell object populated TCR information dandelion python (method: dandelion -> anndata -> anndata2ri, essentially converts AnnData object python SingleCellExperiment R), can directly use setupVdjPseudobulk function extract TCR information construct pseudobulks. , also need specify allowed_chain_status keep relevant contigs. Default allowed_chain_status NULL, keep contigs. standard R workflow starts scRepertoire, assume QC filtering already handled scRepertoire. can visualise UMAP filtered data.","code":"sce_vdj <- setupVdjPseudobulk(sce_vdj,     already.productive = FALSE,     allowed_chain_status = c(         \"Single pair\", \"Extra pair\",         \"Extra pair-exception\", \"Orphan VDJ\",         \"Orphan VDJ-exception\"     ) ) plotUMAP(sce_vdj, color_by = \"anno_lvl_2_final_clean\")"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/vignette_reproduce_original.html","id":"milo-object-and-neighbourhood-graph-construction","dir":"Articles","previous_headings":"","what":"Milo object and neighbourhood graph construction","title":"Reproducing the original dandelion method/paper","text":"use miloR create pseudobulks based gene expression data. goal construct neighbourhood graph many neighbors can sample representative neighbours form objects.","code":"library(miloR) traj_milo <- Milo(sce_vdj) milo_object <- buildGraph(traj_milo, k = 50, d = 20, reduced.dim = \"X_scvi\") milo_object <- makeNhoods(milo_object, reduced_dims = \"X_scvi\", d = 20)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/vignette_reproduce_original.html","id":"construct-umap-on-milo-neighbor-graph","dir":"Articles","previous_headings":"Milo object and neighbourhood graph construction","what":"Construct UMAP on milo neighbor graph","title":"Reproducing the original dandelion method/paper","text":"can visualise milo object using UMAP.","code":"milo_object <- miloUmap(milo_object) plotUMAP(milo_object,     color_by = \"anno_lvl_2_final_clean\",     dimred = \"UMAP_knngraph\" )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/vignette_reproduce_original.html","id":"construct-pseudobulked-vdj-feature-space","dir":"Articles","previous_headings":"","what":"Construct pseudobulked VDJ feature space","title":"Reproducing the original dandelion method/paper","text":"Next, construct pseudobulked VDJ feature space using neighbourhood graph constructed . also run PCA pseudobulked VDJ feature space. can visualise PCA pseudobulked VDJ feature space.","code":"pb.milo <- vdjPseudobulk(milo_object, col_to_take = \"anno_lvl_2_final_clean\")  pb.milo <- runPCA(pb.milo, assay.type = \"Feature_space\") plotPCA(pb.milo, color_by = \"anno_lvl_2_final_clean\")"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/vignette_reproduce_original.html","id":"tcr-trajectory-inference-using-absorbing-markov-chain","dir":"Articles","previous_headings":"","what":"TCR trajectory inference using Absorbing Markov Chain","title":"Reproducing the original dandelion method/paper","text":"original dandelion python package, trajectory inference done using palantir package. , implement absorbing markov chain approach dandelionR infer trajectory, leveraging destiny diffusion map computation.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/vignette_reproduce_original.html","id":"define-root-and-branch-tips","dir":"Articles","previous_headings":"TCR trajectory inference using Absorbing Markov Chain","what":"Define root and branch tips","title":"Reproducing the original dandelion method/paper","text":"","code":"library(SingleCellExperiment)  # extract the PCA matrix pca <- t(as.matrix(reducedDim(pb.milo, type = \"PCA\"))) # define the CD8 terminal cell as the top-most cell and CD4 terminal cell as # the bottom-most cell branch.tips <- c(which.max(pca[2, ]), which.min(pca[2, ])) names(branch.tips) <- c(\"CD8+T\", \"CD4+T\") # define the start of our trajectory as the right-most cell root <- which.max(pca[1, ])"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/vignette_reproduce_original.html","id":"construct-diffusion-map","dir":"Articles","previous_headings":"TCR trajectory inference using Absorbing Markov Chain","what":"Construct diffusion map","title":"Reproducing the original dandelion method/paper","text":"","code":"library(destiny) # Run diffusion map on the PCA feature_space <- t(assay(pb.milo, \"Feature_space\")) dm <- DiffusionMap(as.matrix(feature_space), n_pcs = 50, n_eigs = 10)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/vignette_reproduce_original.html","id":"compute-diffussion-pseudotime-on-diffusion-map","dir":"Articles","previous_headings":"TCR trajectory inference using Absorbing Markov Chain","what":"Compute diffussion pseudotime on diffusion map","title":"Reproducing the original dandelion method/paper","text":"","code":"dif.pse <- DPT(dm, tips = c(root, branch.tips), w_width = 0.1) # the root is automatically called DPT + index of the root cell DPTroot <- paste0(\"DPT\", root) # store pseudotime in milo object pb.milo$pseudotime <- dif.pse[[DPTroot]] # set the colours for pseudotime pal <- colorRampPalette(rev((RColorBrewer::brewer.pal(9, \"RdYlBu\"))))(255) plotPCA(pb.milo, color_by = \"pseudotime\") +     scale_colour_gradientn(colours = pal)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/vignette_reproduce_original.html","id":"markov-chain-construction-on-the-pseudobulk-vdj-feature-space","dir":"Articles","previous_headings":"TCR trajectory inference using Absorbing Markov Chain","what":"Markov chain construction on the pseudobulk VDJ feature space","title":"Reproducing the original dandelion method/paper","text":"","code":"pb.milo <- markovProbability(     milo = pb.milo,     diffusionmap = dm,     terminal_state = branch.tips,     root_cell = root,     pseudotime_key = \"pseudotime\" )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/vignette_reproduce_original.html","id":"visualising-branch-probabilities","dir":"Articles","previous_headings":"TCR trajectory inference using Absorbing Markov Chain","what":"Visualising branch probabilities","title":"Reproducing the original dandelion method/paper","text":"Markov chain probabilities computed, can visualise branch probabilities towards CD4+ CD8+ T-cell fate PCA plot.","code":"plotPCA(pb.milo, color_by = \"CD8+T\") + scale_color_gradientn(colors = pal) plotPCA(pb.milo, color_by = \"CD4+T\") + scale_color_gradientn(colors = pal)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/vignette_reproduce_original.html","id":"transfer","dir":"Articles","previous_headings":"","what":"Transfer","title":"Reproducing the original dandelion method/paper","text":"next step project pseudotime branch probability information pseudobulks back cell dataset. cell belong pseudobulk, removed. cell belongs multiple pseudobulk samples, value calculated weighted average corresponding values pseudobulk, weight inverse size pseudobulk.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/vignette_reproduce_original.html","id":"project-pseudobulk-data-to-each-cell","dir":"Articles","previous_headings":"Transfer","what":"Project pseudobulk data to each cell","title":"Reproducing the original dandelion method/paper","text":"","code":"cdata <- projectPseudotimeToCell(milo_object, pb.milo, branch.tips)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/vignette_reproduce_original.html","id":"visualise-the-trajectory-data-on-a-per-cell-basis","dir":"Articles","previous_headings":"Transfer","what":"Visualise the trajectory data on a per cell basis","title":"Reproducing the original dandelion method/paper","text":"’s ! successfully inferred trajectory T-cells dataset!","code":"plotUMAP(cdata, color_by = \"anno_lvl_2_final_clean\", dimred = \"UMAP_knngraph\") plotUMAP(cdata, color_by = \"pseudotime\", dimred = \"UMAP_knngraph\") +     scale_color_gradientn(colors = pal) plotUMAP(cdata, color_by = \"CD4+T\", dimred = \"UMAP_knngraph\") +     scale_color_gradientn(colors = pal) plotUMAP(cdata, color_by = \"CD8+T\", dimred = \"UMAP_knngraph\") +     scale_color_gradientn(colors = pal)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/articles/vignette_reproduce_original.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Reproducing the original dandelion method/paper","text":"","code":"sessionInfo() ## R version 4.5.0 (2025-04-11) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.2 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] destiny_3.22.0              miloR_2.4.1                 ##  [3] edgeR_4.6.2                 limma_3.64.1                ##  [5] scater_1.36.0               scuttle_1.18.0              ##  [7] SingleCellExperiment_1.30.1 SummarizedExperiment_1.38.1 ##  [9] Biobase_2.68.0              GenomicRanges_1.60.0        ## [11] GenomeInfoDb_1.44.0         IRanges_2.42.0              ## [13] S4Vectors_0.46.0            BiocGenerics_0.54.0         ## [15] generics_0.1.4              MatrixGenerics_1.20.0       ## [17] matrixStats_1.5.0           scRepertoire_2.4.0          ## [19] ggplot2_3.5.2               dandelionR_0.99.11          ## [21] BiocStyle_2.36.0            ##  ## loaded via a namespace (and not attached): ##   [1] cubature_2.1.3          splines_4.5.0           tibble_3.2.1            ##   [4] polyclip_1.10-7         xts_0.14.1              lifecycle_1.0.4         ##   [7] globals_0.18.0          lattice_0.22-6          MASS_7.3-65             ##  [10] magrittr_2.0.3          vcd_1.4-13              sass_0.4.10             ##  [13] rmarkdown_2.29          jquerylib_0.1.4         yaml_2.3.10             ##  [16] spam_2.11-1             sp_2.2-0                cowplot_1.1.3           ##  [19] RColorBrewer_1.1-3      abind_1.4-8             purrr_1.0.4             ##  [22] ggraph_2.2.1            nnet_7.3-20             pracma_2.4.4            ##  [25] tweenr_2.0.3            evmix_2.12              GenomeInfoDbData_1.2.14 ##  [28] ggrepel_0.9.6           irlba_2.3.5.1           listenv_0.9.1           ##  [31] iNEXT_3.0.1             MatrixModels_0.5-4      RSpectra_0.16-2         ##  [34] parallelly_1.44.0       pkgdown_2.1.3           codetools_0.2-20        ##  [37] smoother_1.3            DelayedArray_0.34.1     ggforce_0.4.2           ##  [40] tidyselect_1.2.1        UCSC.utils_1.4.0        farver_2.1.2            ##  [43] ScaledMatrix_1.16.0     viridis_0.6.5           jsonlite_2.0.0          ##  [46] BiocNeighbors_2.2.0     e1071_1.7-16            tidygraph_1.3.1         ##  [49] progressr_0.15.1        Formula_1.2-5           survival_3.8-3          ##  [52] ggalluvial_0.12.5       systemfonts_1.2.3       tools_4.5.0             ##  [55] ragg_1.4.0              stringdist_0.9.15       Rcpp_1.0.14             ##  [58] glue_1.8.0              gridExtra_2.3           SparseArray_1.8.0       ##  [61] laeken_0.5.3            xfun_0.52               ranger_0.17.0           ##  [64] TTR_0.24.4              ggthemes_5.1.0          dplyr_1.1.4             ##  [67] withr_3.0.2             numDeriv_2016.8-1.1     BiocManager_1.30.25     ##  [70] fastmap_1.2.0           boot_1.3-31             bluster_1.18.0          ##  [73] SparseM_1.84-2          VIM_6.2.2               digest_0.6.37           ##  [76] rsvd_1.0.5              R6_2.6.1                textshaping_1.0.1       ##  [79] colorspace_2.1-1        gtools_3.9.5            tidyr_1.3.1             ##  [82] hexbin_1.28.5           data.table_1.17.4       robustbase_0.99-4-1     ##  [85] class_7.3-23            graphlayouts_1.2.2      httr_1.4.7              ##  [88] htmlwidgets_1.6.4       S4Arrays_1.8.0          scatterplot3d_0.3-44    ##  [91] uwot_0.2.3              pkgconfig_2.0.3         gtable_0.3.6            ##  [94] lmtest_0.9-40           XVector_0.48.0          htmltools_0.5.8.1       ##  [97] carData_3.0-5           dotCall64_1.2           bookdown_0.43           ## [100] SeuratObject_5.1.0      scales_1.4.0            knn.covertree_1.0       ## [103] ggdendro_0.2.0          knitr_1.50              rjson_0.2.23            ## [106] reshape2_1.4.4          curl_6.2.3              proxy_0.4-27            ## [109] cachem_1.1.0            zoo_1.8-14              stringr_1.5.1           ## [112] parallel_4.5.0          vipor_0.4.7             desc_1.4.3              ## [115] pillar_1.10.2           grid_4.5.0              vctrs_0.6.5             ## [118] RANN_2.6.2              pcaMethods_2.0.0        VGAM_1.1-13             ## [121] car_3.1-3               BiocSingular_1.24.0     beachmat_2.24.0         ## [124] cluster_2.1.8.1         beeswarm_0.4.0          evaluate_1.0.3          ## [127] truncdist_1.0-2         cli_3.6.5               locfit_1.5-9.12         ## [130] compiler_4.5.0          rlang_1.1.6             crayon_1.5.3            ## [133] future.apply_1.11.3     labeling_0.4.3          plyr_1.8.9              ## [136] fs_1.6.6                ggbeeswarm_0.7.2        stringi_1.8.7           ## [139] viridisLite_0.4.2       BiocParallel_1.42.0     assertthat_0.2.1        ## [142] gsl_2.1-8               quantreg_6.1            Matrix_1.7-3            ## [145] RcppHNSW_0.6.0          RcppEigen_0.3.4.0.2     patchwork_1.3.0         ## [148] future_1.49.0           statmod_1.5.0           evd_2.3-7.1             ## [151] igraph_2.1.4            memoise_2.0.1           bslib_0.9.0             ## [154] DEoptimR_1.1-3-1        ggplot.multistats_1.0.1"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jiawei Yu. Author. Nicholas Borcherding. Author. Kelvin Tuong. Author, maintainer.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Yu J, Borcherding N, Tuong ZK. 2025. dandelionR: Single-cell immune repertoire trajectory analysis R. bioRxiv 2025.02.04.636146; doi: https://doi.org/10.1101/2025.02.04.636146 Suo C, Polanski K, Dann E, Lindeboom RGH, Vilarrasa-Blasi R, Vento-Tormo R, Haniffa M, Meyer KB, Dratva LM, Tuong ZK, Clatworthy MR, Teichmann SA. Dandelion uses single-cell adaptive immune receptor repertoire explore lymphocyte developmental origins. Nat Biotechnol. 2024;42(1):40-51. doi:10.1038/s41587-023-01734-7.","code":"@Article{,   title = {DandelionR: Single-cell immune repertoire trajectory analysis in R},   author = {Jiawei Yu and Nicholas Borcherding and Zewen Kelvin Tuong},   journal = {bioRxiv},   year = {2025},   doi = {10.1101/2025.02.04.636146},   url = {https://www.biorxiv.org/content/10.1101/2025.02.04.636146v1.full}, } @Article{,   title = {Dandelion uses the single-cell adaptive immune receptor repertoire to explore lymphocyte developmental origins},   author = {Chenqu Suo and Krzysztof Polanski and Emma Dann and Rik G.H. Lindeboom and Roser Vilarrasa-Blasi and Roser Vento-Tormo and Muzlifah Haniffa and Kerstin B. Meyer and Lisa M. Dratva and Zewen Kelvin Tuong and Menna R. Clatworthy and Sarah A. Teichmann},   journal = {Nature Biotechnology},   volume = {42},   year = {2024},   publisher = {Nature Publishing Group},   doi = {10.1038/s41587-023-01734-7},   url = {https://www.nature.com/articles/s41587-023-01734-7}, }"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/index.html","id":"dandelionr","dir":"","previous_headings":"","what":"Single-cell Immune Repertoire Trajectory Analysis in R","title":"Single-cell Immune Repertoire Trajectory Analysis in R","text":"Welcome dandelionR! dandelionR R package performing single-cell immune repertoire trajectory analysis, based original python implementation dandelion. provides necessary tools interface scRepertoire custom implementation absorbing markov chain pseudotime inference, inspired based palantir python package.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/index.html","id":"installation-from-bioconductor","dir":"","previous_headings":"","what":"Installation from Bioconductor","title":"Single-cell Immune Repertoire Trajectory Analysis in R","text":"can install dandelionR Bioconductor :","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # The following initializes usage of Bioc devel BiocManager::install(version=\"devel\")  BiocManager::install(\"dandelionR\")"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/index.html","id":"installation-from-github","dir":"","previous_headings":"","what":"Installation from GitHub","title":"Single-cell Immune Repertoire Trajectory Analysis in R","text":"can install dandelionR GitHub :","code":"if (!requireNamespace(\"devtools\", quietly = TRUE))     install.packages(\"devtools\") devtools::install_github('tuonglab/dandelionR', dependencies = TRUE)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Single-cell Immune Repertoire Trajectory Analysis in R","text":"work progress, please feel free open issue encounter problems suggestions improvement.","code":"library(dandelionR)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Single-cell Immune Repertoire Trajectory Analysis in R","text":"use dandelionR work, can cite manuscript bioRxiv: Please also cite original dandelion paper:","code":"Yu, J., Borcherding, N. & Tuong, Z.K.. (2025) DandelionR: Single-cell immune repertoire trajectory analysis in R. bioRxiv 2025.02.04.636146. https://doi.org/10.1101/2025.02.04.636146 Suo, C. et al. Dandelion uses the single-cell adaptive immune receptor repertoire to explore lymphocyte developmental origins. Nat. Biotechnol. 42, 40-51 (2024). https://doi.org:10.1038/s41587-023-01734-7"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/chainAssign.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign the V(D)J gene to the right chain. — chainAssign","title":"Assign the V(D)J gene to the right chain. — chainAssign","text":"Assign V(D)J gene right chain.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/chainAssign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign the V(D)J gene to the right chain. — chainAssign","text":"","code":"chainAssign(vec, num)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/chainAssign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign the V(D)J gene to the right chain. — chainAssign","text":"vec vector V(D)J genes assign right chain. num number genes return. 2(vj) 3(vdj)","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/chainAssign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign the V(D)J gene to the right chain. — chainAssign","text":"list contain vector VJ + VDJ cell input","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dandelionR.html","id":null,"dir":"Reference","previous_headings":"","what":"dandelionR: Single-cell immune repertoire trajectory analysis — dandelionR","title":"dandelionR: Single-cell immune repertoire trajectory analysis — dandelionR","text":"dandelionR R package performing single-cell immune repertoire trajectory analysis, based original python implementation. provides necessary functions interface scRepertoire custom implementation absorbing Markov chain pseudotime inference, inspired Palantir Python package.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dandelionR.html","id":"main-functions","dir":"Reference","previous_headings":"","what":"Main functions","title":"dandelionR: Single-cell immune repertoire trajectory analysis — dandelionR","text":"setupVdjPseudobulk: Preprocess V(D)J Data Pseudobulk Analysis. vdjPseudobulk: Generate Pseudobulk V(D)J Feature Space. markovProbability: Markov Chain Construction Probability Calculation. projectPseudotimeToCell: Project Pseudotime Branch Probabilities Single Cells.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dandelionR.html","id":"vignettes","dir":"Reference","previous_headings":"","what":"Vignettes","title":"dandelionR: Single-cell immune repertoire trajectory analysis — dandelionR","text":"See package vignettes detailed workflows: vignette('dandelionR')","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dandelionR.html","id":"installation","dir":"Reference","previous_headings":"","what":"Installation","title":"dandelionR: Single-cell immune repertoire trajectory analysis — dandelionR","text":"install Bioconductor, use:","code":"if (!requireNamespace('BiocManager', quietly = TRUE))     install.packages('BiocManager') BiocManager::install('dandelionR')"},{"path":[]},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dandelionR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dandelionR: Single-cell immune repertoire trajectory analysis — dandelionR","text":"Maintainer: Kelvin Tuong z.tuong@uq.edu.au (ORCID) Authors: Jiawei Yu jiawei.yu@uq.edu.au (ORCID) Nicholas Borcherding borcherding@wustl.edu (ORCID)","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/demo_airr.html","id":null,"dir":"Reference","previous_headings":"","what":"Example AIRR Dataset for V(D)J Analysis — demo_airr","title":"Example AIRR Dataset for V(D)J Analysis — demo_airr","text":"demo_airr object list AIRR data frames -sampled demo dataset derived Suo et al., 2024, Nature Biotechnology. dataset used vignettes demonstrate workflows V(D)J analysis. details, see original publication https://www.nature.com/articles/s41587-023-01734-7. original files available https://github.com/zktuong/dandelion-demo-files.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/demo_airr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example AIRR Dataset for V(D)J Analysis — demo_airr","text":"","code":"data(demo_airr)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/demo_airr.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example AIRR Dataset for V(D)J Analysis — demo_airr","text":"SingleCellExperiment object following slots: list List DataFrames containing standardised AIRR data sample.  information AIRR rearrangements, see AIRR Community standards https://docs.airr-community.org/.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/demo_airr.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example AIRR Dataset for V(D)J Analysis — demo_airr","text":"Suo et al., 2024, Nature Biotechnology. https://www.nature.com/articles/s41587-023-01734-7.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/demo_airr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example AIRR Dataset for V(D)J Analysis — demo_airr","text":"","code":"data(demo_airr)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/demo_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"Example SCE Dataset that does not contain V(D)J information — demo_sce","title":"Example SCE Dataset that does not contain V(D)J information — demo_sce","text":"demo_sce object -sampled demo dataset derived Suo et al., 2024, Nature Biotechnology. dataset used vignettes demonstrate workflows V(D)J analysis. details, see original publication https://www.nature.com/articles/s41587-023-01734-7. original Lymphoid cells data h5ad format available https://developmental.cellatlas.io/fetal-immune.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/demo_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example SCE Dataset that does not contain V(D)J information — demo_sce","text":"","code":"data(demo_sce)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/demo_sce.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example SCE Dataset that does not contain V(D)J information — demo_sce","text":"SingleCellExperiment object following slots: colData minimall DataFrame containing metadata sample, corresponding obs AnnData (Python). following columns relevant vignette usage: anno_lvl_2_final_clean Cell type annotations. int_colData DataFrame containing additional assay metadata important analysis. Includes: X_scvi: dimensionality reduction matrix scVI model. UMAP: UMAP reduction matrix.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/demo_sce.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example SCE Dataset that does not contain V(D)J information — demo_sce","text":"Suo et al., 2024, Nature Biotechnology. https://www.nature.com/articles/s41587-023-01734-7.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/demo_sce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example SCE Dataset that does not contain V(D)J information — demo_sce","text":"","code":"data(demo_sce)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/differentiationProbabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Branch Probabilities Using Markov Chain — differentiationProbabilities","title":"Compute Branch Probabilities Using Markov Chain — differentiationProbabilities","text":"function calculates branch probabilities differentiation trajectories based Markov chain constructed waypoint data pseudotime ordering.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/differentiationProbabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Branch Probabilities Using Markov Chain — differentiationProbabilities","text":"","code":"differentiationProbabilities(   wp_data,   terminal_states = NULL,   knn = 30L,   pseudotime,   waypoints,   verbose = TRUE,   use_RANN = FALSE )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/differentiationProbabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Branch Probabilities Using Markov Chain — differentiationProbabilities","text":"wp_data multi-scale data matrix data frame representing waypoints. terminal_states Integer vector. Indices terminal states. Default NULL. knn Integer. Number nearest neighbors graph construction. Default 30L. pseudotime Numeric vector. Pseudotime ordering cells. waypoints Integer vector. Indices selected waypoints used construct Markov chain. verbose Boolean, whether print messages/warnings. use_RANN parameter make user choose whether use RANN construct Markov chain, keep using bluster","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/differentiationProbabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Branch Probabilities Using Markov Chain — differentiationProbabilities","text":"numeric matrix data frame containing branch probabilities waypoint.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-KNNind.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the weighted adjacency matrix of knn graph and its index — .KNNind","title":"Calculate the weighted adjacency matrix of knn graph and its index — .KNNind","text":"Calculate weighted adjacency matrix knn graph index","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-KNNind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the weighted adjacency matrix of knn graph and its index — .KNNind","text":"","code":".KNNind(wp_data, knn.)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-KNNind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the weighted adjacency matrix of knn graph and its index — .KNNind","text":"wp_data Multi scale data waypoints knn. Number nearest neighbors graph construction","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-KNNind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the weighted adjacency matrix of knn graph and its index — .KNNind","text":"list containing weight adjacent matrix index","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-RANNinx.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the weight adjacent matricks of knn graph and its index using RANN — .RANNinx","title":"Calculate the weight adjacent matricks of knn graph and its index using RANN — .RANNinx","text":"Calculate weight adjacent matricks knn graph index using RANN","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-RANNinx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the weight adjacent matricks of knn graph and its index using RANN — .RANNinx","text":"","code":".RANNinx(wp_data, knn.)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-RANNinx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the weight adjacent matricks of knn graph and its index using RANN — .RANNinx","text":"wp_data Multi scale data waypoints knn. Number nearest neighbors graph construction","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-RANNinx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the weight adjacent matricks of knn graph and its index using RANN — .RANNinx","text":"list containing weight adjacent matrix index","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-addColData.html","id":null,"dir":"Reference","previous_headings":"","what":"add the calculated probability to the colData — .addColData","title":"add the calculated probability to the colData — .addColData","text":"add calculated probability colData","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-addColData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add the calculated probability to the colData — .addColData","text":"","code":".addColData(probabilities_proj, terminal_state, milo, verbose)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-addColData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add the calculated probability to the colData — .addColData","text":"probabilities_proj probabilities need stored terminal_state Integer. index terminal state Markov chain, passed markovProbability milo milo object provided user verbose logical, print warnings.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-addColData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add the calculated probability to the colData — .addColData","text":"Milo object probabilties pseudotime colData slot","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-allowedChain.html","id":null,"dir":"Reference","previous_headings":"","what":"filtering cell without allowed chain status — .allowedChain","title":"filtering cell without allowed chain status — .allowedChain","text":"filtering cell without allowed chain status","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-allowedChain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"filtering cell without allowed chain status — .allowedChain","text":"","code":".allowedChain(sce, allowed_chain_status, verbose)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-allowedChain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"filtering cell without allowed chain status — .allowedChain","text":"sce SingleCellExperiment object input allowed_chain_status chain needs retain, passed setupVdjPseudobulk verbose logical, print messages. Default TRUE.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-allowedChain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"filtering cell without allowed chain status — .allowedChain","text":"SingleCellExperiment object allowed chain status","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-calDif.html","id":null,"dir":"Reference","previous_headings":"","what":"function help to calculate the diffusion distance — .calDif","title":"function help to calculate the diffusion distance — .calDif","text":"function help calculate diffusion distance","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-calDif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function help to calculate the diffusion distance — .calDif","text":"","code":".calDif(idx, eigenvector, lambda_t, K)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-calDif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function help to calculate the diffusion distance — .calDif","text":"idx integer index calculated value eigenvector numeric vector, eigenvector diffusion map lambda_t eigenvalues power t(diffusion time) K number eigenvectors used calculation","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-calDif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function help to calculate the diffusion distance — .calDif","text":"updated diffusion distance matrix one iteration","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-classCheck.html","id":null,"dir":"Reference","previous_headings":"","what":".classCheck — .classCheck","title":".classCheck — .classCheck","text":"check whether input correct class","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-classCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".classCheck — .classCheck","text":"","code":".classCheck(input, must)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-classCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".classCheck — .classCheck","text":"input input need check must type need","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-classCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".classCheck — .classCheck","text":"whether input correct class","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-collapse_nested_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse a nested list — .collapse_nested_list","title":"Collapse a nested list — .collapse_nested_list","text":"Collapse nested list","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-collapse_nested_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse a nested list — .collapse_nested_list","text":"","code":".collapse_nested_list(input_list)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-collapse_nested_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse a nested list — .collapse_nested_list","text":"input_list input nested list.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-collapse_nested_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse a nested list — .collapse_nested_list","text":"collapsed list","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-constructMarkovChain.html","id":null,"dir":"Reference","previous_headings":"","what":".constructMarkovChain — .constructMarkovChain","title":".constructMarkovChain — .constructMarkovChain","text":"Markov chain construction","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-constructMarkovChain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".constructMarkovChain — .constructMarkovChain","text":"","code":".constructMarkovChain(wp_data, knn., pseudotime, waypoints, vb, use_RANN)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-constructMarkovChain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".constructMarkovChain — .constructMarkovChain","text":"wp_data Multi scale data waypoints knn. Number nearest neighbors graph construction pseudotime pseudotime ordering cells waypoints integer vector, index selected waypoint used vb whether print messages use_RANN parameter make user choose whether use RANN construct Markov chain, keep using bluster","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-constructMarkovChain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".constructMarkovChain — .constructMarkovChain","text":"transition matrix markov chain","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-determExtractColN.html","id":null,"dir":"Reference","previous_headings":"","what":"determine the columns in the colData where the main VDJ information is stored — .determExtractColN","title":"determine the columns in the colData where the main VDJ information is stored — .determExtractColN","text":"determine columns colData main VDJ information stored","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-determExtractColN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"determine the columns in the colData where the main VDJ information is stored — .determExtractColN","text":"","code":".determExtractColN(extract_cols, mode_option, milo)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-determExtractColN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"determine the columns in the colData where the main VDJ information is stored — .determExtractColN","text":"extract_cols names columns colData main VDJ information stores, passed vdjPseudobulk mode_option Specifies mode extracting V(D)J genes milo Milo SingleCellExperiment object provided user","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-determExtractColN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"determine the columns in the colData where the main VDJ information is stored — .determExtractColN","text":"character vector stores names columns colData main VDJ information stores","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-determTerminal.html","id":null,"dir":"Reference","previous_headings":"","what":".determTerminal — .determTerminal","title":".determTerminal — .determTerminal","text":"function Reduce provide waypoints","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-determTerminal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".determTerminal — .determTerminal","text":"","code":".determTerminal(terminal_states, i, dm_boudaries, wp_data)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-determTerminal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".determTerminal — .determTerminal","text":"terminal_states integer vector store generated waypoint index iteration index dm_boudaries index maxium minium value transition matrix per row wp_data Multi scale data waypoints","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-determTerminal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".determTerminal — .determTerminal","text":"integer vector store index waypoints serve terminal state","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-determineMultiscaleSpace.html","id":null,"dir":"Reference","previous_headings":"","what":".determineMultiscaleSpace — .determineMultiscaleSpace","title":".determineMultiscaleSpace — .determineMultiscaleSpace","text":".determineMultiscaleSpace","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-determineMultiscaleSpace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".determineMultiscaleSpace — .determineMultiscaleSpace","text":"","code":".determineMultiscaleSpace(diffusionmap, n_eigs = NULL)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-determineMultiscaleSpace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".determineMultiscaleSpace — .determineMultiscaleSpace","text":"diffusionmap DiffusionMap object n_eigs integer, default NULL. Number eigen vectors use. specified, number eigen vectors determined using eigen gap.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-determineMultiscaleSpace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".determineMultiscaleSpace — .determineMultiscaleSpace","text":"dataframe","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-extractVdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify the columns which store VDJ information, and extract the main chain from it — .extractVdj","title":"Specify the columns which store VDJ information, and extract the main chain from it — .extractVdj","text":"Specify columns store VDJ information, extract main chain ","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-extractVdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify the columns which store VDJ information, and extract the main chain from it — .extractVdj","text":"","code":".extractVdj(sce, extract_cols, mode_option, verbose)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-extractVdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify the columns which store VDJ information, and extract the main chain from it — .extractVdj","text":"sce SingleCellExperiment object input extract_cols setupVdjPseutobulk transfered parameter given user specify VDJ information columns mode_option see document setupVdjPseudobulk detailed explanation verbose logical, print messages. Default TRUE.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-extractVdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify the columns which store VDJ information, and extract the main chain from it — .extractVdj","text":"SingleCellExperiment objects column stores information main VDJ information colData slot","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-featureSpaceConstruct.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct VDJ feature space — .featureSpaceConstruct","title":"Construct VDJ feature space — .featureSpaceConstruct","text":"Construct VDJ feature space","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-featureSpaceConstruct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct VDJ feature space — .featureSpaceConstruct","text":"","code":".featureSpaceConstruct(milo, extract_cols, pbs)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-featureSpaceConstruct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct VDJ feature space — .featureSpaceConstruct","text":"milo Milo SingleCellExperiment object provided user extract_cols columns names extract VDJ information pbs cell x pseudobulk adjacent matrix","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-featureSpaceConstruct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct VDJ feature space — .featureSpaceConstruct","text":"constructed feature space","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-filterCells.html","id":null,"dir":"Reference","previous_headings":"","what":".filterCells — .filterCells","title":".filterCells — .filterCells","text":"Helper function identifies filter_pattern hits determined column sce, either removes offeending cells masks matched values uniform value '(column's name)_missing'","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-filterCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".filterCells — .filterCells","text":"","code":".filterCells(   sce,   col_n,   filter_pattern = \",|None|No_contig\",   remove_missing = TRUE )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-filterCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".filterCells — .filterCells","text":"sce SingleCellExperiment object, adata python data combineTCR, contain vdj seq col_n mode extraction V(D)J genes. filter_pattern character string, optional ',|None|No_contig' default remove_missing bool, True default TRUE, remove cells contigs matching filter object. FALSE, mask uniform value dependent column name.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-filterCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".filterCells — .filterCells","text":"filtered SingleCellExperiment object according parameter.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-filterProductivity.html","id":null,"dir":"Reference","previous_headings":"","what":"filer out cell with unproductive chain — .filterProductivity","title":"filer out cell with unproductive chain — .filterProductivity","text":"filer cell unproductive chain","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-filterProductivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"filer out cell with unproductive chain — .filterProductivity","text":"","code":".filterProductivity(   sce,   mode_option,   productive_cols,   productive_vj,   productive_vdj,   verbose )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-filterProductivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"filer out cell with unproductive chain — .filterProductivity","text":"sce SingleCellExperiment input mode_option check setupVdjPseudobulk detailed explanation productive_vj TRUE, retains cells main VJ chain productive. productive_vdj TRUE, retains cells main VDJ chain productive. verbose logical, print messages. Default TRUE.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-filterProductivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"filer out cell with unproductive chain — .filterProductivity","text":"SingleCellExperiment object filtering producive chain","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-filterUnmapped.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter out cell with unclear mapping in VDJ information — .filterUnmapped","title":"Filter out cell with unclear mapping in VDJ information — .filterUnmapped","text":"Filter cell unclear mapping VDJ information","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-filterUnmapped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter out cell with unclear mapping in VDJ information — .filterUnmapped","text":"","code":".filterUnmapped(   sce,   mode_option,   check_vj_mapping,   check_vdj_mapping,   main_cols,   check_extract_cols_mapping,   remove_missing,   verbose )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-filterUnmapped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter out cell with unclear mapping in VDJ information — .filterUnmapped","text":"sce SingleCellExperiment object input mode_option see document setupVdjPseudobulk explanation check_vj_mapping logical vector set whether check V J gene VJ chain, passed setupVdjPseudobulk check_vdj_mapping logical vector set whether check V, D J gene VDJ chain, passed setupVdjPseudobulk main_cols column names colData information main chain stores check_extract_cols_mapping character vector,names columns needs checked, passed setupVdjPseudobulk remove_missing option removing unclear mappin just mask , passed setupVdjPseudobulk verbose logical, print messages.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-filterUnmapped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter out cell with unclear mapping in VDJ information — .filterUnmapped","text":"filtered SingleCellExperiment object","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-findNewWaypoints.html","id":null,"dir":"Reference","previous_headings":"","what":"function used in Reduce to find new waypoint in an iteration — .findNewWaypoints","title":"function used in Reduce to find new waypoint in an iteration — .findNewWaypoints","text":"function used Reduce find new waypoint iteration","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-findNewWaypoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function used in Reduce to find new waypoint in an iteration — .findNewWaypoints","text":"","code":".findNewWaypoints(iterdists, k, vecs, ind, datas)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-findNewWaypoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function used in Reduce to find new waypoint in an iteration — .findNewWaypoints","text":"iterdists list containing waypoints deteted former iterations distance matrix used find waypoints k iteration number vecs numeric vector used calculate distance waypoints points ind colnames","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-findNewWaypoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function used in Reduce to find new waypoint in an iteration — .findNewWaypoints","text":"list containing updated distance matrix new waypoints","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-generateExtractColumn.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether the columns with specified names exist, if not, create them with CTgene columns — .generateExtractColumn","title":"Check whether the columns with specified names exist, if not, create them with CTgene columns — .generateExtractColumn","text":"Check whether columns specified names exist, , create CTgene columns","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-generateExtractColumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether the columns with specified names exist, if not, create them with CTgene columns — .generateExtractColumn","text":"","code":".generateExtractColumn(sce, extract_cols, verbose)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-generateExtractColumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether the columns with specified names exist, if not, create them with CTgene columns — .generateExtractColumn","text":"sce SingleCellExperiment object input extract_cols column names aim extract information verbose logical, print messages. Default TRUE.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-generateExtractColumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether the columns with specified names exist, if not, create them with CTgene columns — .generateExtractColumn","text":"SingleCellExperiment columns containing VDJ information names specified.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-generateExtractName.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the name of columns with given parameter — .generateExtractName","title":"Generate the name of columns with given parameter — .generateExtractName","text":"Generate name columns given parameter","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-generateExtractName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the name of columns with given parameter — .generateExtractName","text":"","code":".generateExtractName(sce, mode_option, verbose)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-generateExtractName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the name of columns with given parameter — .generateExtractName","text":"sce SingleCellExperiment object input mode_option see document setupVdjPseudobulk explanation verbose logical, print messages. Default TRUE.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-generateExtractName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the name of columns with given parameter — .generateExtractName","text":"vecotor colnames need perform main chain extraction","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-getPbs.html","id":null,"dir":"Reference","previous_headings":"","what":".getPbs — .getPbs","title":".getPbs — .getPbs","text":"Helper function ensure cells pseudobulks matrix can use pseudobulking.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-getPbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".getPbs — .getPbs","text":"","code":".getPbs(pbs, col_to_bulk, milo, verbose = TRUE)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-getPbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".getPbs — .getPbs","text":"pbs pbs parameter provided vdjPseudobulk(),  cells pseudobulks matrix NULL col_to_bulk col_to_bulk parameter provided vdjPseudobulk(), column's name colData milo milo SingleCellExperiment object verbose logical, whether print messages","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-getPbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".getPbs — .getPbs","text":"cell x pseudobulk matrix","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-getPbsCol.html","id":null,"dir":"Reference","previous_headings":"","what":".getPbsCol — .getPbsCol","title":".getPbsCol — .getPbsCol","text":"Helper function create new pseudobulk object's coldata.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-getPbsCol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".getPbsCol — .getPbsCol","text":"","code":".getPbsCol(pbs, col_to_take, milo)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-getPbsCol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".getPbsCol — .getPbsCol","text":"pbs dgeMatrix, cell x pseudobulk binary matrix col_to_take character vector, names colData milo need processed milo Milo SingleCellExperiment object","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-getPbsCol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".getPbsCol — .getPbsCol","text":"pbs_col, DataFrame passed new SingleCellExperiment object colData vdj x pseudobulk assays","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-getPbsPerCol.html","id":null,"dir":"Reference","previous_headings":"","what":".getPbsPerCol — .getPbsPerCol","title":".getPbsPerCol — .getPbsPerCol","text":"function used Reduce get PbsCol","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-getPbsPerCol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".getPbsPerCol — .getPbsPerCol","text":"","code":".getPbsPerCol(pbs.col, anno_col, milo, pbs)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-getPbsPerCol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".getPbsPerCol — .getPbsPerCol","text":"pbs.col DataFrame object used store result iteration anno_col colname generate metadata milo milo SingleCellExperiment objects provided user pbs dgeMatrix, cell x pseudobulk binary matrix","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-getPbsPerCol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".getPbsPerCol — .getPbsPerCol","text":"DataFrame object, serve part metadata new milo object","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-maxMinSampling.html","id":null,"dir":"Reference","previous_headings":"","what":".maxMinSampling — .maxMinSampling","title":".maxMinSampling — .maxMinSampling","text":"function max min sampling waypoints","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-maxMinSampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".maxMinSampling — .maxMinSampling","text":"","code":".maxMinSampling(datas, num_waypoints, verbose = TRUE)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-maxMinSampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".maxMinSampling — .maxMinSampling","text":"datas data matrix along sample waypoints, usually diffusion components num_waypoints number waypoints sample verbose logical, print progress","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-maxMinSampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".maxMinSampling — .maxMinSampling","text":"Series reprenting sampled waypoints","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-minMaxScale.html","id":null,"dir":"Reference","previous_headings":"","what":"minMaxScale — .minMaxScale","title":"minMaxScale — .minMaxScale","text":"scale value range 0 1","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-minMaxScale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"minMaxScale — .minMaxScale","text":"","code":".minMaxScale(data)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-minMaxScale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"minMaxScale — .minMaxScale","text":"data dataframe need scale","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-minMaxScale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"minMaxScale — .minMaxScale","text":"scaled value","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-normalizeFeatureSpace.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Feature Space — .normalizeFeatureSpace","title":"Normalize Feature Space — .normalizeFeatureSpace","text":"Make sure sum V, D, J gene within pseudobulk equals 1","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-normalizeFeatureSpace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Feature Space — .normalizeFeatureSpace","text":"","code":".normalizeFeatureSpace(   pseudo_vdj_feature,   extract_cols,   min_count,   renormalize,   milo )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-normalizeFeatureSpace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Feature Space — .normalizeFeatureSpace","text":"pseudo_vdj_feature constructed feature space extract_cols names columns extract VDJ information min_count minim count V/D/J gene renormalize Whether renormalize matrix milo Milo SingleCellExperiment object provided user","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-normalizeFeatureSpace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Feature Space — .normalizeFeatureSpace","text":"normalized VDJ feature space","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-normalizePerVDJ.html","id":null,"dir":"Reference","previous_headings":"","what":"function to normalize a specific kind of VDJ gene in feature space — .normalizePerVDJ","title":"function to normalize a specific kind of VDJ gene in feature space — .normalizePerVDJ","text":"function normalize specific kind VDJ gene feature space","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-normalizePerVDJ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function to normalize a specific kind of VDJ gene in feature space — .normalizePerVDJ","text":"","code":".normalizePerVDJ(   pseudo_vdj_feature,   col_n,   renormalize,   define.mask,   milo,   min_count )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-normalizePerVDJ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function to normalize a specific kind of VDJ gene in feature space — .normalizePerVDJ","text":"pseudo_vdj_feature constructed feature space col_n name column extract VDJ information renormalize Whether renormalize matrix define.mask logical vector determine whether V/D/J gene masked normalizing milo Milo SingleCellExperiment object provided user min_count minim count V/D/J gene","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-normalizePerVDJ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function to normalize a specific kind of VDJ gene in feature space — .normalizePerVDJ","text":"feature space normalized specifed V/D/J gene","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-packFeatureSpace.html","id":null,"dir":"Reference","previous_headings":"","what":"Pack the normalized feature space into new Milo object — .packFeatureSpace","title":"Pack the normalized feature space into new Milo object — .packFeatureSpace","text":"metadata derived original milo","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-packFeatureSpace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pack the normalized feature space into new Milo object — .packFeatureSpace","text":"","code":".packFeatureSpace(pbs, col_to_take, milo, pseudo_vdj_feature)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-packFeatureSpace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pack the normalized feature space into new Milo object — .packFeatureSpace","text":"pbs cell x pseudobulk adjacent matrix col_to_take Optional character vector characters. Specifies names colData milo need identify common value pseudobulk milo Milo SingleCellExperiment object provided user pseudo_vdj_feature VDJ feature space","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-packFeatureSpace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pack the normalized feature space into new Milo object — .packFeatureSpace","text":"Milo object VDJ feature space stored assay","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-removeEdge.html","id":null,"dir":"Reference","previous_headings":"","what":"function used in Reduce to remove KNN's backward edges except for edges that are within the computed standard deviation — .removeEdge","title":"function used in Reduce to remove KNN's backward edges except for edges that are within the computed standard deviation — .removeEdge","text":"function used Reduce remove KNN's backward edges except edges within computed standard deviation","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-removeEdge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function used in Reduce to remove KNN's backward edges except for edges that are within the computed standard deviation — .removeEdge","text":"","code":".removeEdge(Knn, i, rem_edges)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-removeEdge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function used in Reduce to remove KNN's backward edges except for edges that are within the computed standard deviation — .removeEdge","text":"Knn weight KNN adjacent matrix iteration number rem_edges edges need removes","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-removeEdge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function used in Reduce to remove KNN's backward edges except for edges that are within the computed standard deviation — .removeEdge","text":"updated matrix one round iteration","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-subsetSce.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset sce with given parameter — .subsetSce","title":"Subset sce with given parameter — .subsetSce","text":"Subset sce given parameter","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-subsetSce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset sce with given parameter — .subsetSce","text":"","code":".subsetSce(sce, subsetby, groups, verbose)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-subsetSce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset sce with given parameter — .subsetSce","text":"sce SingleCellExperiment object input subsetby subsetby Character. Name colData column subsetting. given setupVdjPsudobulk. groups Character vector. Specifies subset condition filtering. given setupVdjPsudobulk. verbose logical, print messages. Default TRUE.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-subsetSce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset sce with given parameter — .subsetSce","text":"subsetted SingleCellExperiment object","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-terminalStateFromMarkovChain.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine terminal states using Markov chain if end states are not provided. — .terminalStateFromMarkovChain","title":"Determine terminal states using Markov chain if end states are not provided. — .terminalStateFromMarkovChain","text":"Determine terminal states using Markov chain end states provided.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-terminalStateFromMarkovChain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine terminal states using Markov chain if end states are not provided. — .terminalStateFromMarkovChain","text":"","code":".terminalStateFromMarkovChain(   Transmat,   wp_data,   pseudotime,   waypoints,   verbose )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-terminalStateFromMarkovChain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine terminal states using Markov chain if end states are not provided. — .terminalStateFromMarkovChain","text":"Transmat Transition matrix wp_data Multi scale data waypoints pseudotime numeric vector, pseudotime pseudobulk waypoints integer vector, waypoint selected construct markov chain. verbose Boolean, whether print messages/warnings.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-terminalStateFromMarkovChain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine terminal states using Markov chain if end states are not provided. — .terminalStateFromMarkovChain","text":"terminal_state","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-typeCheck.html","id":null,"dir":"Reference","previous_headings":"","what":".typeCheck — .typeCheck","title":".typeCheck — .typeCheck","text":"check whether input correct type","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-typeCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".typeCheck — .typeCheck","text":"","code":".typeCheck(input, must)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-typeCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".typeCheck — .typeCheck","text":"input input need check must type need","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-typeCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".typeCheck — .typeCheck","text":"whether input correct type","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-waypiontsPerCol.html","id":null,"dir":"Reference","previous_headings":"","what":"find the waypoints according to certain columns of data — .waypiontsPerCol","title":"find the waypoints according to certain columns of data — .waypiontsPerCol","text":"find waypoints according certain columns data","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-waypiontsPerCol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find the waypoints according to certain columns of data — .waypiontsPerCol","text":"","code":".waypiontsPerCol(waypoints, ind, datas, no.iterations)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-waypiontsPerCol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find the waypoints according to certain columns of data — .waypiontsPerCol","text":"waypoints integer vector used store waypoints ind columns' colnames datas scaled diffusionmap","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/dot-waypiontsPerCol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find the waypoints according to certain columns of data — .waypiontsPerCol","text":"numeric vector containing waypoints' index","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/formatVdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the format of splitCTgene output. — formatVdj","title":"Change the format of splitCTgene output. — formatVdj","text":"Change format splitCTgene output.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/formatVdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the format of splitCTgene output. — formatVdj","text":"","code":"formatVdj(gene_list)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/formatVdj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the format of splitCTgene output. — formatVdj","text":"gene_list list containing output splitCTgene.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/formatVdj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change the format of splitCTgene output. — formatVdj","text":"list contain vector VJ + VDJ information cell input","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/markovProbability.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Chain Construction and Probability Calculation — markovProbability","title":"Markov Chain Construction and Probability Calculation — markovProbability","text":"function preprocesses data, constructs Markov chain, calculates transition probabilities based pseudotime information.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/markovProbability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Markov Chain Construction and Probability Calculation — markovProbability","text":"","code":"markovProbability(   milo,   diffusionmap,   terminal_state = NULL,   root_cell,   knn = 30L,   diffusiontime = NULL,   pseudotime_key = \"pseudotime\",   scale_components = TRUE,   num_waypoints = 500,   n_eigs = NULL,   verbose = TRUE,   use_RANN = FALSE )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/markovProbability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Markov Chain Construction and Probability Calculation — markovProbability","text":"milo Milo SingleCellExperiment object. object pseudotime stored colData, used calculate probabilities. pseudotime available milo, takes precedence value provided diffusiontime parameter. diffusionmap DiffusionMap object corresponding milo object. Used Markov chain construction. terminal_state Integer. index terminal state Markov chain. root_cell Integer. index root state Markov chain. knn Integer. number nearest neighbors graph construction. Default 30L. diffusiontime Numeric vector. pseudotime stored milo, parameter can used provide pseudotime values function. pseudotime_key Character. name column colData contains inferred pseudotime. scale_components Logical. TRUE, components scaled constructing Markov chain. Default FALSE. num_waypoints Integer. number waypoints sample constructing Markov chain. Default 500L. n_eigs integer, default NULL. Number eigen vectors use. specified, number eigen vectors determined using eigen gap. verbose Logical. TRUE, print progress. Default TRUE. use_RANN parameter make user choose whether use RANN construct Markov chain, keep using bluster","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/markovProbability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Markov Chain Construction and Probability Calculation — markovProbability","text":"milo SinglCellExperiment object pseudotime, probabilities colData","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/markovProbability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Markov Chain Construction and Probability Calculation — markovProbability","text":"","code":"data(sce_vdj) # downsample to first 2000 cells sce_vdj <- sce_vdj[, 1:2000] sce_vdj <- setupVdjPseudobulk(sce_vdj,     already.productive = FALSE,     allowed_chain_status = c(\"Single pair\", \"Extra pair\") ) #> Checking productivity from productive_abT_VDJ, productive_abT_VJ ... #> 1461 of cells filtered #> checking allowed chains... #> 3 of cells filtered #> VDJ data extraction begin: #> extract_cols not specified, automatically generate colnames for extraction. #> Extract main TCR from v_call_abT_VDJ, d_call_abT_VDJ, j_call_abT_VDJ, v_call_abT_VJ, j_call_abT_VJ ... #> Complete. #> Filtering cells from v_call_abT_VDJ_main, j_call_abT_VDJ_main, v_call_abT_VJ_main, j_call_abT_VJ_main ... #> 11 of cells filtered #> 525 of cells remain. # Build Milo Object set.seed(100) milo_object <- miloR::Milo(sce_vdj) milo_object <- miloR::buildGraph(milo_object,     k = 50, d = 20,     reduced.dim = \"X_scvi\" ) #> Constructing kNN graph with k:50 milo_object <- miloR::makeNhoods(milo_object,     reduced_dims = \"X_scvi\",     d = 20 ) #> Checking valid object #> Running refined sampling with reduced_dim  # Construct Pseudobulked VDJ Feature Space pb.milo <- vdjPseudobulk(milo_object, col_to_take = \"anno_lvl_2_final_clean\") pb.milo <- scater::runPCA(pb.milo, assay.type = \"Feature_space\") #> Warning: more singular values/vectors requested than available #> Warning: You're computing too large a percentage of total singular values, use a standard svd instead.  # Define root and branch tips pca <- t(as.matrix(SingleCellExperiment::reducedDim(pb.milo, type = \"PCA\"))) branch.tips <- c(which.min(pca[, 2]), which.max(pca[, 2])) names(branch.tips) <- c(\"CD8+T\", \"CD4+T\") root <- which.min(pca[, 1])  # Construct Diffusion Map dm <- destiny::DiffusionMap(t(pca), n_pcs = 10, n_eigs = 5) #> 'as(<dsCMatrix>, \"dgTMatrix\")' is deprecated. #> Use 'as(as(., \"generalMatrix\"), \"TsparseMatrix\")' instead. #> See help(\"Deprecated\") and help(\"Matrix-deprecated\"). dif.pse <- destiny::DPT(dm, tips = c(root, branch.tips), w_width = 0.1)  # Markov Chain Construction pb.milo <- markovProbability(     milo = pb.milo,     diffusionmap = dm,     diffusiontime = dif.pse[[paste0(\"DPT\", root)]],     terminal_state = branch.tips,     root_cell = root,     pseudotime_key = \"pseudotime\" ) #> Sampling and flocking waypoints... #> Markov chain construction... #> Computing fundamental matrix and absorption probabilities... #> Warning: Matrix generated is singular or nearly singular; using pseudo-inverse to construct fundamental matrix. #> Project probabilites from waypoints to each pseudobulk... #> Complete."},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/miloUmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform UMAP on the Adjacency Matrix of a Milo Object — miloUmap","title":"Perform UMAP on the Adjacency Matrix of a Milo Object — miloUmap","text":"function uses uwot::umap perform UMAP dimensionality reduction adjacency matrix KNN graph Milo object.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/miloUmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform UMAP on the Adjacency Matrix of a Milo Object — miloUmap","text":"","code":"miloUmap(   milo,   slot_name = \"UMAP_knngraph\",   n_neighbors = 50L,   metric = \"euclidean\",   min_dist = 0.3,   use_graph = TRUE,   ... )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/miloUmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform UMAP on the Adjacency Matrix of a Milo Object — miloUmap","text":"milo milo object knn graph needed conduct umap . slot_name character, default 'UMAP_knngraph'. slot name reduceDim result store n_neighbors integer, default 50L. size local neighborhood (terms number neighboring sample points) used manifold approximation. , goal create large enough neighborhoods capture local manifold structure allow hypersampling. metric character, default 'euclidean' choice metric used measure distance find nearest neighbors. Default 'euclidean'. min_dist numeric, default 0.3 minimum distance points low dimensional space use_graph Logical, default TRUE. Whether run UMAP graph adjacency matrix (TRUE) Dandelion, directly latent space (FALSE) faster performance. ... parameters passed uwot::umap","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/miloUmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform UMAP on the Adjacency Matrix of a Milo Object — miloUmap","text":"milo object umap reduction","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/miloUmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform UMAP on the Adjacency Matrix of a Milo Object — miloUmap","text":"","code":"data(sce_vdj) # downsample to just 1000 cells sce_vdj <- sce_vdj[, 1:1000] sce_vdj <- setupVdjPseudobulk(sce_vdj,     already.productive = FALSE,     allowed_chain_status = c(\"Single pair\", \"Extra pair\") ) #> Checking productivity from productive_abT_VDJ, productive_abT_VJ ... #> 744 of cells filtered #> checking allowed chains... #> 2 of cells filtered #> VDJ data extraction begin: #> extract_cols not specified, automatically generate colnames for extraction. #> Extract main TCR from v_call_abT_VDJ, d_call_abT_VDJ, j_call_abT_VDJ, v_call_abT_VJ, j_call_abT_VJ ... #> Complete. #> Filtering cells from v_call_abT_VDJ_main, j_call_abT_VDJ_main, v_call_abT_VJ_main, j_call_abT_VJ_main ... #> 7 of cells filtered #> 247 of cells remain. # Build Milo Object milo_object <- miloR::Milo(sce_vdj) milo_object <- miloR::buildGraph(milo_object,     k = 50, d = 20,     reduced.dim = \"X_scvi\" ) #> Constructing kNN graph with k:50 milo_object <- miloR::makeNhoods(milo_object,     reduced_dims = \"X_scvi\", d = 20 ) #> Checking valid object #> Running refined sampling with reduced_dim  # Construct UMAP on Milo Neighbor Graph milo_object <- miloUmap(milo_object)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/projectProbability.html","id":null,"dir":"Reference","previous_headings":"","what":"Project Probabilities from Markov Chain to Pseudobulks — projectProbability","title":"Project Probabilities from Markov Chain to Pseudobulks — projectProbability","text":"function projects probabilities calculated Markov chain onto pseudobulk based diffusion distance matrix.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/projectProbability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project Probabilities from Markov Chain to Pseudobulks — projectProbability","text":"","code":"projectProbability(   diffusionmap,   waypoints,   probabilities,   t = 1,   verbose = TRUE )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/projectProbability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project Probabilities from Markov Chain to Pseudobulks — projectProbability","text":"diffusionmap diffusion map, used reconstruct diffustion distance matrix waypoints Integer vector. Indices waypoints used Markov chain. probabilities Numeric vector. Probabilities associated waypoints, calculated Markov chain. t Numeric. diffusion time used projection. verbose Boolean, whether print messages/warnings.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/projectProbability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project Probabilities from Markov Chain to Pseudobulks — projectProbability","text":"pseudobulk's probabilites","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/projectPseudotimeToCell.html","id":null,"dir":"Reference","previous_headings":"","what":"Project Pseudotime and Branch Probabilities to Single Cells — projectPseudotimeToCell","title":"Project Pseudotime and Branch Probabilities to Single Cells — projectPseudotimeToCell","text":"function projects pseudotime branch probabilities pseudobulk data single-cell resolution (milo). results stored colData milo object.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/projectPseudotimeToCell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project Pseudotime and Branch Probabilities to Single Cells — projectPseudotimeToCell","text":"","code":"projectPseudotimeToCell(   milo,   pb_milo,   term_states = NULL,   pseudotime_key = \"pseudotime\",   suffix = \"\",   verbose = TRUE )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/projectPseudotimeToCell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project Pseudotime and Branch Probabilities to Single Cells — projectPseudotimeToCell","text":"milo SingleCellExperiment Milo object. Represents single-cell data pseudotime branch probabilities projected. pb_milo pseudobulk Milo object. Contains aggregated branch probabilities pseudotime information transferred single cells. term_states Named vector terminal states, branch probabilities transferred. names correspond branches interest. pseudotime_key Character. column name colData pb_milo contains pseudotime information used markovProbability function. Default \"pseudotime\". suffix Character. suffix added new column names colData. Default empty string (''). verbose Boolean, whether print messages/warnings.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/projectPseudotimeToCell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project Pseudotime and Branch Probabilities to Single Cells — projectPseudotimeToCell","text":"subset milo SingleCellExperiment object cell belong neighbourhood removed projected pseudotime information stored colData","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/projectPseudotimeToCell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project Pseudotime and Branch Probabilities to Single Cells — projectPseudotimeToCell","text":"","code":"data(sce_vdj) # downsample to first 2000 cells sce_vdj <- sce_vdj[, 1:2000] sce_vdj <- setupVdjPseudobulk(sce_vdj,     already.productive = FALSE,     allowed_chain_status = c(\"Single pair\", \"Extra pair\") ) #> Checking productivity from productive_abT_VDJ, productive_abT_VJ ... #> 1461 of cells filtered #> checking allowed chains... #> 3 of cells filtered #> VDJ data extraction begin: #> extract_cols not specified, automatically generate colnames for extraction. #> Extract main TCR from v_call_abT_VDJ, d_call_abT_VDJ, j_call_abT_VDJ, v_call_abT_VJ, j_call_abT_VJ ... #> Complete. #> Filtering cells from v_call_abT_VDJ_main, j_call_abT_VDJ_main, v_call_abT_VJ_main, j_call_abT_VJ_main ... #> 11 of cells filtered #> 525 of cells remain. # Build Milo Object set.seed(100) milo_object <- miloR::Milo(sce_vdj) milo_object <- miloR::buildGraph(milo_object,     k = 50, d = 20,     reduced.dim = \"X_scvi\" ) #> Constructing kNN graph with k:50 milo_object <- miloR::makeNhoods(milo_object,     reduced_dims = \"X_scvi\",     d = 20 ) #> Checking valid object #> Running refined sampling with reduced_dim  # Construct Pseudobulked VDJ Feature Space pb.milo <- vdjPseudobulk(milo_object, col_to_take = \"anno_lvl_2_final_clean\") pb.milo <- scater::runPCA(pb.milo, assay.type = \"Feature_space\") #> Warning: more singular values/vectors requested than available #> Warning: You're computing too large a percentage of total singular values, use a standard svd instead.  # Define root and branch tips pca <- t(as.matrix(SingleCellExperiment::reducedDim(pb.milo, type = \"PCA\"))) branch.tips <- c(which.min(pca[, 2]), which.max(pca[, 2])) names(branch.tips) <- c(\"CD8+T\", \"CD4+T\") root <- which.min(pca[, 1])  # Construct Diffusion Map dm <- destiny::DiffusionMap(t(pca), n_pcs = 10, n_eigs = 5) dif.pse <- destiny::DPT(dm, tips = c(root, branch.tips), w_width = 0.1)  # Markov Chain Construction pb.milo <- markovProbability(     milo = pb.milo,     diffusionmap = dm,     diffusiontime = dif.pse[[paste0(\"DPT\", root)]],     terminal_state = branch.tips,     root_cell = root,     pseudotime_key = \"pseudotime\" ) #> Sampling and flocking waypoints... #> Markov chain construction... #> Computing fundamental matrix and absorption probabilities... #> Warning: Matrix generated is singular or nearly singular; using pseudo-inverse to construct fundamental matrix. #> Project probabilites from waypoints to each pseudobulk... #> Complete. # Project Pseudobulk Data projected_milo <- projectPseudotimeToCell(     milo_object,     pb.milo,     branch.tips,     pseudotime_key = \"pseudotime\" ) #> 0 number of cells removed due to not belonging to any neighbourhood"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/sce_vdj.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Dataset for V(D)J Analysis — sce_vdj","title":"Example Dataset for V(D)J Analysis — sce_vdj","text":"sce_vdj object -sampled demo dataset derived Suo et al., 2024, Nature Biotechnology.  dataset used vignettes demonstrate workflows V(D)J analysis.  details, see original publication https://www.nature.com/articles/s41587-023-01734-7.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/sce_vdj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Dataset for V(D)J Analysis — sce_vdj","text":"","code":"data(sce_vdj)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/sce_vdj.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Dataset for V(D)J Analysis — sce_vdj","text":"SingleCellExperiment object following slots: colData DataFrame containing metadata sample, corresponding obs AnnData (Python). following columns relevant vignette usage: productive_(mode)_VDJ, productive_(mode)_VJ Factors indicating whether heavy light chain productive. mode refers extraction mode V(D)J genes can one : 'abT': TCR alpha-beta 'gdT': TCR gamma-delta 'B': BCR Gene segment fields Gene segment annotations column names format (v/d/j)_call_(mode)_(VDJ/VJ). Examples include: v_call_abT_VDJ: V gene TCR alpha-beta VDJ recombination d_call_abT_VJ: D gene TCR alpha-beta VJ recombination chain_status factor describing receptor chain's status. anno_lvl_2_final_clean Cell type annotations. int_colData DataFrame containing additional assay metadata important analysis. Includes: X_scvi: dimensionality reduction matrix scVI model. UMAP: UMAP reduction matrix.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/sce_vdj.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Dataset for V(D)J Analysis — sce_vdj","text":"Suo et al., 2024, Nature Biotechnology.https://www.nature.com/articles/s41587-023-01734-7.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/sce_vdj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Dataset for V(D)J Analysis — sce_vdj","text":"","code":"data(sce_vdj)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/setupVdjPseudobulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess V(D)J Data for Pseudobulk Analysis — setupVdjPseudobulk","title":"Preprocess V(D)J Data for Pseudobulk Analysis — setupVdjPseudobulk","text":"function preprocesses single-cell V(D)J sequencing data pseudobulk analysis. filters data based productivity chain status, subsets data, extracts main V(D)J genes, removes unmapped entries.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/setupVdjPseudobulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess V(D)J Data for Pseudobulk Analysis — setupVdjPseudobulk","text":"","code":"setupVdjPseudobulk(   sce,   mode_option = c(\"abT\", \"gdT\", \"B\"),   already.productive = TRUE,   productive_cols = NULL,   productive_vj = TRUE,   productive_vdj = TRUE,   allowed_chain_status = NULL,   subsetby = NULL,   groups = NULL,   extract_cols = NULL,   filter_unmapped = TRUE,   check_vj_mapping = c(TRUE, TRUE),   check_vdj_mapping = c(TRUE, FALSE, TRUE),   check_extract_cols_mapping = NULL,   remove_missing = TRUE,   verbose = TRUE )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/setupVdjPseudobulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess V(D)J Data for Pseudobulk Analysis — setupVdjPseudobulk","text":"sce SingleCellExperiment object. V(D)J data contained colData filtering. mode_option Optional character. Specifies mode extracting V(D)J genes. NULL, extract_cols must specified. Default NULL. already.productive Logical. Whether data already filtered productivity. TRUE, skips productivity filtering. Default FALSE. productive_cols Character vector. Names colData columns used productivity filtering. Default NULL. productive_vj Logical. TRUE, retains cells main VJ chain productive. Default TRUE. productive_vdj Logical. TRUE, retains cells main VDJ chain productive. Default TRUE. allowed_chain_status Character vector. Specifies chain statuses retain. Valid options include`c('single pair', 'Extra pair', 'Extra pair-exception', 'Orphan VDJ', 'Orphan VDJ-exception')`. Default NULL. subsetby Character. Name colData column subsetting. Default NULL. groups Character vector. Specifies subset condition filtering. Default NULL. extract_cols Character vector. Names colData columns V(D)J information stored, used instead standard columns. Default NULL. filter_unmapped Logic. Whether filter unmapped data. Default TRUE. check_vj_mapping Logic vector. Whether check VJ mapping. Default c(TRUE, TRUE). first element TRUE, function filter unmapped data V gene VJ chain second element TRUE, function filter unmapped data J gene VJ chain check_vdj_mapping Logic vector. Specifies columns check VDJ mapping. Default c(TRUE, FALSE, 'TRUE). first element TRUE, function filter unmapped data V gene VDJ chain second element TRUE, function filter unmapped data D gene VDJ chain third element TRUE, function filter unmapped data J gene VDJ chain check_extract_cols_mapping Character vector. Specifies columns related extract_cols mapping checks. Default NULL. remove_missing Logical. TRUE, removes cells contigs matching filter. FALSE, masks uniform values. Default TRUE. verbose Logical. Whether print messages. Default TRUE.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/setupVdjPseudobulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess V(D)J Data for Pseudobulk Analysis — setupVdjPseudobulk","text":"filtered SingleCellExperiment object","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/setupVdjPseudobulk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Preprocess V(D)J Data for Pseudobulk Analysis — setupVdjPseudobulk","text":"function performs following preprocessing steps: Productivity Filtering: Skipped already.productive = TRUE. Filters cells based productivity using productive_cols standard colData columns named productive_{mode_option}_{type} (type 'VDJ' 'VJ'). mode_option function check colData(s) named productive_{mode_option}_{type}, type 'VDJ' 'VJ' , depending values productive_vj productive_vdj. set NULl, function needs option 'extract_cols' specified productive_cols must specified productivity filtering need conduct mode_option NULL. VDJ/VJ information stored used instead standard columns. productive_vj, productive_vdj TRUE, cell kept main V(D)J chain productive Chain Status Filtering: Retains cells chain statuses specified allowed_chain_status. Subsetting: Conducted subsetby groups provided. Retains cells matching groups condition subsetby column. Main V(D)J Extraction: Uses extract_cols specify custom columns extracting V(D)J information. Unmapped Data Filtering: decided removes masks cells based filter_unmapped. Checks specific columns unclear mappings using check_vj_mapping, check_vdj_mapping, check_extract_cols_mapping. filter_unmapped pattern filtered object. set NULL, filtering process start check_vj_mapping, check_vdj_mapping colData specified arguments (check_vj_mapping check_vdj_mapping) checked unclear mappings check_extract_cols_mapping, related extract_cols colData specified argument checked unclear mapping, colData first specified extract_cols remove_missing TRUE, remove cells contigs matching filter object. FALSE, mask uniform value dependent column name.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/setupVdjPseudobulk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess V(D)J Data for Pseudobulk Analysis — setupVdjPseudobulk","text":"","code":"# load data data(sce_vdj) # check the dimension dim(sce_vdj) #> [1] 33538 10000 # filtered the data sce_vdj <- setupVdjPseudobulk(     sce = sce_vdj,     mode_option = \"abT\", # set the mode to alpha-beta TCR     allowed_chain_status = c(\"Single pair\", \"Extra pair\"),     already.productive = FALSE ) # need to filter the unproductive cells #> Checking productivity from productive_abT_VDJ, productive_abT_VJ ... #> 7279 of cells filtered #> checking allowed chains... #> 12 of cells filtered #> VDJ data extraction begin: #> extract_cols not specified, automatically generate colnames for extraction. #> Extract main TCR from v_call_abT_VDJ, d_call_abT_VDJ, j_call_abT_VDJ, v_call_abT_VJ, j_call_abT_VJ ... #> Complete. #> Filtering cells from v_call_abT_VDJ_main, j_call_abT_VDJ_main, v_call_abT_VJ_main, j_call_abT_VJ_main ... #> 63 of cells filtered #> 2646 of cells remain. # check the remaining dim dim(sce_vdj) #> [1] 33538  2646"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/splitCTgene.html","id":null,"dir":"Reference","previous_headings":"","what":"Split the V(D)J genes from CTgene column and store them separately. — splitCTgene","title":"Split the V(D)J genes from CTgene column and store them separately. — splitCTgene","text":"Split V(D)J genes CTgene column store separately.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/splitCTgene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split the V(D)J genes from CTgene column and store them separately. — splitCTgene","text":"","code":"splitCTgene(sce)"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/splitCTgene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split the V(D)J genes from CTgene column and store them separately. — splitCTgene","text":"sce SingleCellExperiment object conducting scRepertoire::combineTCR()","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/splitCTgene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split the V(D)J genes from CTgene column and store them separately. — splitCTgene","text":"list contain vector VJ & VDJ genes cell","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/vdjPseudobulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Pseudobulk V(D)J Feature Space — vdjPseudobulk","title":"Generate Pseudobulk V(D)J Feature Space — vdjPseudobulk","text":"function creates pseudobulk V(D)J feature space single-cell data, aggregating V(D)J information pseudobulk groups. supports input either Milo object SingleCellExperiment object.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/vdjPseudobulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Pseudobulk V(D)J Feature Space — vdjPseudobulk","text":"","code":"vdjPseudobulk(   milo,   pbs = NULL,   col_to_bulk = NULL,   extract_cols = c(\"v_call_abT_VDJ_main\", \"j_call_abT_VDJ_main\", \"v_call_abT_VJ_main\",     \"j_call_abT_VJ_main\"),   mode_option = c(\"abT\", \"gdT\", \"B\"),   col_to_take = NULL,   normalise = TRUE,   renormalize = FALSE,   min_count = 1L,   verbose = TRUE )"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/vdjPseudobulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Pseudobulk V(D)J Feature Space — vdjPseudobulk","text":"milo Milo SingleCellExperiment object containing V(D)J data. pbs Optional. binary matrix cells rows pseudobulk groups columns. milo Milo object, parameter required. milo SingleCellExperiment object, either pbs col_to_bulk must provided. col_to_bulk Optional character character vector. Specifies colData column(s) generate pbs. multiple columns provided, combined. Default NULL. milo Milo object, parameter required. milo SingleCellExperiment object, either pbs col_to_bulk must provided. extract_cols Character vector. Specifies column names V(D)J information stored. Default c('v_call_abT_VDJ_main', 'j_call_abT_VDJ_main', ' 'v_call_abT_VJ_main', 'j_call_abT_VJ_main'). mode_option Character. Specifies mode extracting V(D)J genes. Must one c('B', 'abT', 'gdT'). Default 'abT'. Note: parameter considered extract_cols = NULL. NULL, uses column names v_call_VDJ instead v_call_abT_VDJ. col_to_take Optional character vector characters. Specifies names colData milo need identify common value pseudobulk Default NULL. normalise Logical. TRUE, scales counts V(D)J gene group 1 pseudobulk. Default TRUE. renormalize Logical. TRUE, rescales counts V(D)J gene group 1 pseudobulk removing 'missing' calls. Useful setupVdjPseudobulk() run remove_missing = FALSE. Default FALSE. min_count Integer. Sets pseudobulk counts V(D)J gene groups fewer many non-missing calls 0. Default 1. verbose Logical. TRUE, prints messages warnings. Default TRUE.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/vdjPseudobulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Pseudobulk V(D)J Feature Space — vdjPseudobulk","text":"SingleCellExperiment object","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/vdjPseudobulk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Pseudobulk V(D)J Feature Space — vdjPseudobulk","text":"function aggregates V(D)J data pseudobulk groups based following logic: Input Requirements: milo Milo object, neither pbs col_to_bulk required. milo SingleCellExperiment object, user must provide either pbs col_to_bulk. Normalization: normalise = TRUE, scales V(D)J counts 1 pseudobulk group. renormalize = TRUE, rescales counts removing 'missing' calls. Mode Selection: extract_cols = NULL, function relies mode_option determine V(D)J columns extract. Filtering: Uses min_count filter pseudobulks insufficient counts V(D)J groups.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/reference/vdjPseudobulk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Pseudobulk V(D)J Feature Space — vdjPseudobulk","text":"","code":"data(sce_vdj) sce_vdj <- setupVdjPseudobulk(sce_vdj,     already.productive = FALSE,     allowed_chain_status = c(\"Single pair\", \"Extra pair\") ) #> Checking productivity from productive_abT_VDJ, productive_abT_VJ ... #> 7279 of cells filtered #> checking allowed chains... #> 12 of cells filtered #> VDJ data extraction begin: #> extract_cols not specified, automatically generate colnames for extraction. #> Extract main TCR from v_call_abT_VDJ, d_call_abT_VDJ, j_call_abT_VDJ, v_call_abT_VJ, j_call_abT_VJ ... #> Complete. #> Filtering cells from v_call_abT_VDJ_main, j_call_abT_VDJ_main, v_call_abT_VJ_main, j_call_abT_VJ_main ... #> 63 of cells filtered #> 2646 of cells remain. # Build Milo Object milo_object <- miloR::Milo(sce_vdj) milo_object <- miloR::buildGraph(milo_object,     k = 50, d = 20,     reduced.dim = \"X_scvi\" ) #> Constructing kNN graph with k:50 milo_object <- miloR::makeNhoods(milo_object,     reduced_dims = \"X_scvi\",     d = 20 ) #> Checking valid object #> Running refined sampling with reduced_dim  # Construct pseudobulked VDJ feature space pb.milo <- vdjPseudobulk(milo_object, col_to_take = \"anno_lvl_2_final_clean\")"},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/news/index.html","id":"dandelionr-version-09911-2025-02-28","dir":"Changelog","previous_headings":"","what":"dandelionR Version 0.99.11 (2025-02-28)","title":"dandelionR Version 0.99.11 (2025-02-28)","text":"Updates README include citation bioRxiv preprint.","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/news/index.html","id":"dandelionr-version-09910-2025-02-17","dir":"Changelog","previous_headings":"","what":"dandelionR Version 0.99.10 (2025-02-17)","title":"dandelionR Version 0.99.10 (2025-02-17)","text":"Accepted version Bioconductor version 3.21 (Development).","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/news/index.html","id":"dandelionr-version-0999-2025-02-08","dir":"Changelog","previous_headings":"","what":"dandelionR Version 0.99.9 (2025-02-08)","title":"dandelionR Version 0.99.9 (2025-02-08)","text":"Updated address Bioconductor submission review comments. https://github.com/tuonglab/dandelionR/issues/56","code":""},{"path":"https:/tuonglab.github.io/dandelionR/preview/pr68/news/index.html","id":"dandelionr-version-0990-2024-12-12","dir":"Changelog","previous_headings":"","what":"dandelionR Version 0.99.0 (2024-12-12)","title":"dandelionR Version 0.99.0 (2024-12-12)","text":"First working version package.w","code":""}]
