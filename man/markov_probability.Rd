% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/markov_probability.R
\name{markov_probability}
\alias{markov_probability}
\title{markov_probability}
\usage{
markov_probability(
  milo,
  diffusionmap,
  diffusiontime = NULL,
  terminal_state,
  root_cell,
  pseudotime_key = "pseudotime",
  scale_components = TRUE,
  num_waypoints = 500
)
}
\arguments{
\item{milo}{milo or SingelCellExperiment object, with pseudotime stored in colData, used to store the result and extract pseudotime. Pseudotime stored in milo has higher priority than the value provided through the diffusiontime parameter}

\item{diffusionmap}{DiffusionMap object corresponds to milo}

\item{diffusiontime}{if milo do not restore pseudotime, use this parameter to transfer it to function}

\item{terminal_state}{the index of the terminal state}

\item{root_cell}{the index of the root state}

\item{pseudotime_key}{the column name in the colData that holds the inferred pseudotime}

\item{scale_components}{logical, If True, the components will be scale before constructing markov chain}

\item{num_waypoints}{integer, 500L by default. Number of waypoints to sample to construct markov chain.}
}
\value{
milo or SinglCellExperiment object with pseudotime, probabilities in its colData
}
\description{
Preprocessing data and Construct markov chain and calculate probabilities
}
\examples{
# load data
data(pb.milo)
library(SingleCellExperiment)
branch.tips <- c(540,54)
names(branch.tips) <- c("CD8+T", "CD4+T")
root <- 222
DPTroot <- paste0("DPT", root)
# extract pca
pca <- t(as.matrix(reducedDim(pb.milo, type = "PCA")))
# Run diffusion map on the PCA
library(destiny)
dm <- DiffusionMap(t(pca),n_pcs=50, n_eigs = 10)
dif.pse <- DPT(dm, tips = c(root, branch.tips), w_width = 0.1)
pb.milo$pseudotime <- dif.pse[[DPTroot]]

pb.milo <- markov_probability(
milo=pb.milo, 
diffusionmap=dm, 
terminal_state=branch.tips, 
root_cell=root, 
pseudotime_key="pseudotime")

#visualization of the results
library(scater)
pal <- colorRampPalette(rev((RColorBrewer::brewer.pal(9, "RdYlBu"))))(255)
plotPCA(pb.milo,  color_by = "CD8+T") + scale_color_gradientn(colors = pal)
plotPCA(pb.milo,  color_by = "CD4+T") + scale_color_gradientn(colors = pal)
}
